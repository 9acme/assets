<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>掘金</title><link>https://juejin.cn/</link><description>代码不止,掘金不停</description><lastBuildDate>Fri, 05 Aug 2022 22:45:16 GMT</lastBuildDate><generator>PyRSS2Gen-1.1.0</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>Cypress + Siri 实现语音召唤 B 栈视频</title><link>https://juejin.cn/post/7125573371579858957</link><description>&lt;hr /&gt;
&lt;img alt="" src="https://juejin.cn/post/---" width="50%" /&gt;
theme: smartblue
highlight: a11y-dark
---
&lt;p&gt;我正在参加「创意开发 投稿大赛」详情请看：&lt;a href="https://juejin.cn/post/7120441631530549284" title="https://juejin.cn/post/7120441631530549284"&gt;掘金创意开发大赛来了！&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;程序员的世界就是简单而快乐。&lt;/p&gt;
&lt;p&gt;最近在编写，我的工程化体系课程实在太枯燥了。在编写E2E测试案例时候，无意间想到 E2E 框架可以操纵网页，是不是可以实现一键登录B栈【舞蹈区】选择行榜一小姐姐跳舞呀。&lt;/p&gt;
&lt;p&gt;&lt;img alt="image.png" src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/61df981d00d94beeb11e5bac6b8be2f3~tplv-k3u1fbpfcp-watermark.image" /&gt;&lt;/p&gt;
&lt;h1&gt;什么是E2E测试&lt;/h1&gt;
&lt;p&gt;首先先介绍一下，E2E测试框架是什么。简单来说，就是模拟真实用户使用场景进行测试，预期应用能够正常响应用户的操作，其关键点在于模拟用户使用环境，模拟用户操作。&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/74ff6c615e0644428dc3d7eb5543be0f~tplv-k3u1fbpfcp-zoom-1.image" /&gt;&lt;/p&gt;
&lt;p&gt;Cypress这种成熟的E2E测试框架都会提供成熟的，模拟用户操作的API。
比如：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;访问网站&lt;/li&gt;
&lt;li&gt;选择页面元素&lt;/li&gt;
&lt;li&gt;模拟点击&lt;/li&gt;
&lt;li&gt;模拟键盘输出&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class="language-js"&gt;// 访问网站
cy.visit("http://127.0.0.1:8080/");

// 输入信息
cy.get("input").type(" Cypress");

// 点击按钮
cy.get("button").click();

// 获取信息并断言
cy.get("input").should("have.value", "Hello Cypress")

&lt;/code&gt;&lt;/pre&gt;
&lt;h1&gt;访问B栈【舞蹈区】榜一小姐姐&lt;/h1&gt;
&lt;p&gt;既然框架中已经包含了这些API，可以模拟浏览器中的各种行为。
当然也可以通过他们编写程序自动访问 BiliBili 舞蹈区，并且选择一个视频页进行播放了。&lt;/p&gt;
&lt;p&gt;首先安装 Cypress 框架。Cypress需要通过Npm包管理器安装。&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-bash"&gt;pnpm i cypress -D
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;安装后启动 Cypress&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-bash"&gt;npx cypress open
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;cypress的默认启动方式是通过界面形式。可以方便的使用UI界面添加测试用例。&lt;/p&gt;
&lt;p&gt;&lt;img alt="image.png" src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/e65b702c3df54871838c477f8427d640~tplv-k3u1fbpfcp-watermark.image" /&gt;&lt;/p&gt;
&lt;p&gt;Cypress 目前支持E2E测试和组件测试。这里面需要选择，E2E测试。
&lt;img alt="image.png" src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/6178d2e29d2a4aee907275fca2f79dc1~tplv-k3u1fbpfcp-watermark.image" /&gt;&lt;/p&gt;
&lt;p&gt;对于E2E测试的运行时环境也有两种选择，一种是Chrome浏览器，另外一一种是Electron。既然要播放B栈，那么应该选择Chrome浏览器。&lt;/p&gt;
&lt;p&gt;&lt;img alt="image.png" src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/fe637c59a7d644f488660116e71b89d0~tplv-k3u1fbpfcp-watermark.image" /&gt;&lt;/p&gt;
&lt;p&gt;选择后会自动打开一个Chrome，与以往的Chrome浏览器不同的是。这个浏览器是带有特别的调试参数启动的。上面有一个黑色的框表示这个Chrome是接收自动测试软件控制的。也就是说Chrome的行为可以被Cypress所控制。这也正是我们需要的效果。因为我们需要Cypress发送指令浏览B站上的指定内容。&lt;/p&gt;
&lt;p&gt;点击 【New Spec】 创建新的用例&lt;/p&gt;
&lt;p&gt;然后编写代码&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;首先创建一个测试单元&lt;/li&gt;
&lt;li&gt;使用 cy.visit 访问B栈舞蹈区&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class="language-js"&gt;describe("B栈摸鱼", () =&amp;gt; {
  it("找到榜一小姐姐", () =&amp;gt; {
    // 登录舞蹈区
    cy.visit("https://www.bilibili.com/v/dance/");

  });
});
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;点击运行用例&lt;/p&gt;
&lt;p&gt;&lt;img alt="image.png" src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/1a84379432e8486f9e1e457a560ff6c3~tplv-k3u1fbpfcp-watermark.image" /&gt;&lt;/p&gt;
&lt;p&gt;这个时候可以看到，Chrome的界面右侧显示部分，打开了一个Iframe。iframe直接访问的B栈的舞蹈区。也就说所在这里Cypress成功的访问了B站。&lt;/p&gt;
&lt;p&gt;&lt;img alt="image.png" src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/ffd4bc9841074f33bf9ee0b1b57f82c0~tplv-k3u1fbpfcp-watermark.image" /&gt;&lt;/p&gt;
&lt;p&gt;下面实现自动访问榜一功能。
其实这个功能就要做两件事&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;选取视频列表中的第一个链接&lt;/li&gt;
&lt;li&gt;模拟点击第一个链接&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;首先是选取视频列表元素，可以使用 cy.get。
get中实际是Query Selector表达式。通俗的说就是Jquery选择器。
这个语法就不过多介绍了。不会的自行百度。
通过 Chrome 审查元素查看视频便签，确定选择器。
&lt;img alt="image.png" src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/e7f6bc6a24684958b9c54effe9534392~tplv-k3u1fbpfcp-watermark.image" /&gt;&lt;/p&gt;
&lt;p&gt;然后使用 cy,click() 就可以模拟点击了。&lt;/p&gt;
&lt;p&gt;最后为了让我们能观看一段时间，可以使用 cy.wait()。
不然的话页面会自动关闭。&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-js"&gt;describe("B栈摸鱼", () =&amp;gt; {
  it("找到榜一小姐姐", () =&amp;gt; {
    // 登录舞蹈区
    cy.visit("https://www.bilibili.com/v/dance/");
    // 选择榜一小姐姐
    cy.get(".bili-video-card__info--tit a").first().click();
    // 摸鱼时间
    cy.wait(10 * 1000);
  });
});
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;好实验一下效果。&lt;/p&gt;
&lt;p&gt;&lt;img alt="image.png" src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/47d5ce51abc242b4951fb4e4909c763b~tplv-k3u1fbpfcp-watermark.image" /&gt;&lt;/p&gt;
&lt;h1&gt;实现Siri语音召唤&lt;/h1&gt;
&lt;p&gt;使用命令行召唤还是太累了。
最好是懒洋洋的喊一句，Hey Siri就可以自动召唤小姐姐。&lt;/p&gt;
&lt;p&gt;其实现在Mac可以使用通过快捷指令自定义Siri。&lt;/p&gt;
&lt;p&gt;&lt;img alt="image.png" src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/7b275029b8ef4c6b8c8e31a0ed2f91c5~tplv-k3u1fbpfcp-watermark.image" /&gt;&lt;/p&gt;
&lt;p&gt;实际上Cypress可以通过Shell调用。而快捷指令可以运行Shell。这样只需要编写一个名字叫做【放松一下】的快捷指令。就可以实现Siri的语音唤醒了。&lt;/p&gt;
&lt;p&gt;&lt;img alt="image.png" src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/9632bc069b1c4902aaf344eff07a84c3~tplv-k3u1fbpfcp-watermark.image" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="image.png" src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/dfaff421bf754c528d73c70ed10ba98f~tplv-k3u1fbpfcp-watermark.image" /&gt;&lt;/p&gt;
&lt;p&gt;这样就可以轻松实现语音唤醒功能了。&lt;/p&gt;
&lt;p&gt;这时候只需要说 【Hey， Siri， 放松一下】&lt;/p&gt;
&lt;p&gt;&lt;img alt="image.png" src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/7904ebc0bdc14d5d852eaf555e052721~tplv-k3u1fbpfcp-watermark.image" /&gt;&lt;/p&gt;
&lt;p&gt;需要源代码可以关注公众号【前端大班车】回复【xiaojiejie】&lt;/p&gt;
&lt;h1&gt;别忘了给然叔点赞&lt;/h1&gt;
&lt;h1&gt;别忘了给然叔点赞&lt;/h1&gt;
&lt;h1&gt;别忘了给然叔点赞&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://juejin.cn/post/7123012186884014116"&gt;41岁的程序员的”毕业“走向自由职业&lt;/a&gt; 🔥 助力然叔&lt;/li&gt;
&lt;li&gt;&lt;a href="https://juejin.cn/post/7038627294197317662" title="彻底搞懂HTTP协议 - 天天造轮子"&gt;彻底搞懂HTTP协议 - 天天造轮子&lt;/a&gt; -🔥月冠军&lt;/li&gt;
&lt;li&gt;&lt;a href="https://juejin.cn/post/6961961165656326152"&gt;做了一夜动画，让大家十分钟搞懂Webpack&lt;/a&gt; -  👍🏻1471赞&lt;/li&gt;
&lt;li&gt;&lt;a href="https://juejin.cn/post/6911897255087702030"&gt;【Vue官方教程笔记】- 尤雨溪手写mini-vue&lt;/a&gt;  👍🏻1643赞&lt;/li&gt;
&lt;li&gt;&lt;a href="https://juejin.cn/post/6909247394904702984"&gt;【Vue3官方教程】🎄万字笔记 | 同步导学视频&lt;/a&gt;  - 👍🏻1536赞&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;我正在参与掘金技术社区创作者签约计划招募活动，&lt;a href="https://juejin.cn/post/7112770927082864653" title="https://juejin.cn/post/7112770927082864653"&gt;点击链接报名投稿&lt;/a&gt;。&lt;/p&gt;</description><author>全栈然叔</author><pubDate>Thu, 28 Jul 2022 15:44:42 GMT</pubDate></item><item><title>尤雨溪对未来前端趋势分享: 笔记</title><link>https://juejin.cn/post/7123178292865155102</link><description>&lt;hr /&gt;
&lt;h2&gt;theme: smartblue&lt;/h2&gt;
&lt;p&gt;早上参加稀土掘金大会随手记下的。能力有限，欢迎勘误。&lt;/p&gt;
&lt;p&gt;🔥 大家好我是然叔一个41岁的程序员老兵，&lt;/p&gt;
&lt;p&gt;我会不断分享我学习的心得&lt;/p&gt;
&lt;p&gt;内附然叔优秀作品汇总链接&lt;/p&gt;
&lt;p&gt;建议收藏&lt;/p&gt;
&lt;p&gt;&lt;img alt="image.png" src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/b76d1e0aea8c43be8df69435a1cf120a~tplv-k3u1fbpfcp-watermark.image" /&gt;&lt;/p&gt;
&lt;p&gt;链接在此 建议点赞赞收藏
↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓&lt;/p&gt;
&lt;h1&gt;&lt;a href="https://juejin.cn/post/7123012186884014116"&gt;41岁的程序员的”毕业“走向自由职业&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;&lt;img alt="Snip20220722_43.png" src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/4f77af032feb416eb7a4511304312f51~tplv-k3u1fbpfcp-watermark.image" /&gt;&lt;/p&gt;
&lt;h1&gt;一、 开发范式&amp;amp;底层框架&lt;/h1&gt;
&lt;h2&gt;1、React Hooks 带来的开发范式的变革&lt;/h2&gt;
&lt;p&gt;&lt;img alt="Snip20220722_64.png" src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/082693c637f7422a940a298fb96cde98~tplv-k3u1fbpfcp-watermark.image" /&gt;
&lt;img alt="image.png" src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/56f393fed6f745258061439d60860caa~tplv-k3u1fbpfcp-watermark.image" /&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;React Hooks 取代 Class Components&lt;/li&gt;
&lt;li&gt;启发组件逻辑表达和逻辑复用的新范式
&lt;ul&gt;
&lt;li&gt;Vue3: Composition API&lt;/li&gt;
&lt;li&gt;Svelte3: 编译后逻辑受到了React Hooks启发&lt;/li&gt;
&lt;li&gt;SolidJS: Hooks语法相似 + 实现与CompositionAPI相似的写法&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="image.png" src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/3dce19d601f34344a730a07a013b35cf~tplv-k3u1fbpfcp-watermark.image" /&gt;&lt;/p&gt;
&lt;h3&gt;React Hooks的开发体验被逐渐正视&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Hooks 执行原理和原生JS心智模型的差异&lt;/li&gt;
&lt;li&gt;不能条件式调用&lt;/li&gt;
&lt;li&gt;Stale Closure（过期闭包）的心智负担&lt;/li&gt;
&lt;li&gt;必须手动声明 useEffect 依赖&lt;/li&gt;
&lt;li&gt;如何”正确“使用 useEffect 是个复杂的问题&lt;/li&gt;
&lt;li&gt;需要 useMemo / useCallback 等手动优化&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="image.png" src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/c352b52059e3403d82956544ab5dbf06~tplv-k3u1fbpfcp-watermark.image" /&gt;&lt;/p&gt;
&lt;h3&gt;React 团队对改善开发体验的努力&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;useEventRFC 改善useCallback的问题&lt;/li&gt;
&lt;li&gt;Dan Abranmov 话单量时间改进新版 useEffect 文档&lt;/li&gt;
&lt;li&gt;黄玄正在开发中的 React Forget 已在避免需要手动声明依赖&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="image.png" src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/c8bf91faac2f4964959c5bb04329160e~tplv-k3u1fbpfcp-watermark.image" /&gt;&lt;/p&gt;
&lt;h3&gt;基于依赖追踪的范式重新得到重视&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;SolidJS 符合直觉无需声明依赖&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="image.png" src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/cb99f1233de0499e9d7caa9b64ae70bd~tplv-k3u1fbpfcp-watermark.image" /&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Vue Composition API ref追踪依赖&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="image.png" src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/191808623111446b87790e149b8f3b44~tplv-k3u1fbpfcp-watermark.image" /&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Ember Starbeam Cell追踪依赖
&lt;img alt="image.png" src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/58ec267c68be45d6a86af201885ab3df~tplv-k3u1fbpfcp-watermark.image" /&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;基于依赖追踪的范式 - 共同点&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;一次调用，符合原生JS直觉&lt;/li&gt;
&lt;li&gt;自动追踪依赖，无需手动声明&lt;/li&gt;
&lt;li&gt;引用稳定，无需useCallback&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;3. 基于编译的响应式系统&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;基于编译时优化改善开发体验&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;Sevlte  【$】副作用黑魔法
&lt;img alt="image.png" src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/736991e3a7e348cfbd18127b06632b14~tplv-k3u1fbpfcp-watermark.image" /&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;简洁代码带来的限制&lt;/p&gt;
&lt;p&gt;&lt;img alt="image.png" src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/3d47d8e32a6b489a8d0536ec97fc32a6~tplv-k3u1fbpfcp-watermark.image" /&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;只能在Svelet组件内使用&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;组件外需要不同的API&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;只能在顶层作用域使用&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Vue Reactivity Transform  响应式转换&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;编译时宏 $ref&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img alt="image.png" src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/f5b825cf9d504b33b9150c944657b48d~tplv-k3u1fbpfcp-watermark.image" /&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;solid labels&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;类似于 Vue Reactivity Transform&lt;br /&gt;
&lt;img alt="image.png" src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/a7e5decfaba3423680335b430fb4c6c1~tplv-k3u1fbpfcp-watermark.image" /&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;统一模型的优势和代价&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;✅  利于长期的重构和复用&lt;/li&gt;
&lt;li&gt;😭 底层实现的抽象泄漏&lt;/li&gt;
&lt;li&gt;😭 初期学习成本&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;4. 基于编译的运行时优化&lt;/h2&gt;
&lt;p&gt;&lt;img alt="image.png" src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/9b8096261c714f9cb1320a9fd705d6b1~tplv-k3u1fbpfcp-watermark.image" /&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Svelte - 通过命令节点拼接JS代码&lt;/li&gt;
&lt;li&gt;Solid - 基本HTML字符串 -&amp;gt; Dom节点绑定&lt;/li&gt;
&lt;li&gt;Vue Vapor Mode - 与 Solid&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Vue Vapor Mode&lt;/h3&gt;
&lt;p&gt;SFC单文件输出&lt;/p&gt;
&lt;p&gt;&lt;img alt="image.png" src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/8f5603ed6a754a04b08a126492e881de~tplv-k3u1fbpfcp-watermark.image" /&gt;&lt;/p&gt;
&lt;p&gt;类 Solid 输出&lt;/p&gt;
&lt;p&gt;&lt;img alt="image.png" src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/7c1d07905e614c21a7d03e1644292789~tplv-k3u1fbpfcp-watermark.image" /&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;一次性生成静态节点&lt;/li&gt;
&lt;li&gt;找到动态节点进行状态绑定&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;二、工具链&lt;/h1&gt;
&lt;h2&gt;1. 原生语言在前端工具链中的使用&lt;/h2&gt;
&lt;p&gt;&lt;img alt="image.png" src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/0e83e975cbc24953bc0abc73976dafc9~tplv-k3u1fbpfcp-watermark.image" /&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;工具链原生语言参与比例提高&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;esbuild （Go）&lt;/li&gt;
&lt;li&gt;SWC (Rust)&lt;/li&gt;
&lt;li&gt;Vite (JS / GoHybrid Via ESBuild)&lt;/li&gt;
&lt;li&gt;napi-rs (Rust)&lt;/li&gt;
&lt;li&gt;Parcel2 (JS/Rust hybird)&lt;/li&gt;
&lt;li&gt;Bun (Zig)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;趋势分析&lt;/p&gt;
&lt;p&gt;&lt;img alt="image.png" src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/23cc4cf64d384e68babacc59c5403169~tplv-k3u1fbpfcp-watermark.image" /&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;JS 与 原生语言混合成为趋势&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;2. 工具链的抽象层次&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;browserfy/webpack/rollup  - 专注打包、抽象层次低&lt;/li&gt;
&lt;li&gt;Parcel/Vue-CLI/CRA - 专注抽象层次&lt;/li&gt;
&lt;li&gt;Vite - CLI专注于应用、API专注于支持上层框架、抽象层次高&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;3、 基于Vite的上层框架&lt;/h2&gt;
&lt;p&gt;&lt;img alt="image.png" src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/b085f23d6c0645f88e8780687bd2a2fc~tplv-k3u1fbpfcp-watermark.image" /&gt;&lt;/p&gt;
&lt;h1&gt;四、上层框架Meta Framworks&lt;/h1&gt;
&lt;h2&gt;1. JS全栈的意义&lt;/h2&gt;
&lt;p&gt;常用的全栈框架&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;BFF 一个语言打通前后端&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;2. 数据打通&lt;/h2&gt;
&lt;p&gt;&lt;img alt="image.png" src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/59ccccc2ac0f4d79a2bfa8be0667e6d5~tplv-k3u1fbpfcp-watermark.image" /&gt;&lt;/p&gt;
&lt;h2&gt;3. 类型打通&lt;/h2&gt;
&lt;p&gt;&lt;img alt="image.png" src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/c710d9730e4e4f7c927bc56fb5a33ce1~tplv-k3u1fbpfcp-watermark.image" /&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;通过显示引入共享类型&lt;/li&gt;
&lt;li&gt;基于DB schema 生成类型&lt;/li&gt;
&lt;li&gt;Nuxt3 自动基于文件布局生成API/路由类型&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;4. JS全栈的代价&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;虽然数据已经渲染出了HTML 但还需要额外发送一份Hydrate&lt;/li&gt;
&lt;li&gt;及时客户端没有交互组件依然会被打包发送至客户端&lt;/li&gt;
&lt;li&gt;Hydrate 影响页面交互指标（TTI）&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;5. 社区的探索&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Server-only Components (Next/Nuxt)&lt;/li&gt;
&lt;li&gt;Partial hydration / Island&lt;/li&gt;
&lt;li&gt;Fine-grained+ resumable hydration  (Qwik)&lt;/li&gt;
&lt;li&gt;Shell + hydration (VitePress)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;早上参加稀土掘金大会随手记下的。能力有限，欢迎勘误。&lt;/p&gt;
&lt;p&gt;早上参加稀土掘金大会随手记下的。能力有限，欢迎勘误。&lt;/p&gt;
&lt;p&gt;早上参加稀土掘金大会随手记下的。能力有限，欢迎勘误。&lt;/p&gt;
&lt;h1&gt;往年优秀文章汇总&lt;/h1&gt;
&lt;h2&gt;征文获奖 &amp;amp; 千赞文章&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://juejin.cn/post/7038627294197317662" title="https://juejin.cn/post/7038627294197317662"&gt;彻底搞懂HTTP协议 - 天天造轮子&lt;/a&gt; -🔥月冠军&lt;/li&gt;
&lt;li&gt;&lt;a href="https://juejin.cn/post/6961961165656326152" title="https://juejin.cn/post/6961961165656326152"&gt;做了一夜动画，让大家十分钟搞懂Webpack&lt;/a&gt; - 👍🏻1471赞&lt;/li&gt;
&lt;li&gt;&lt;a href="https://juejin.cn/post/6911897255087702030" title="https://juejin.cn/post/6911897255087702030"&gt;【Vue官方教程笔记】- 尤雨溪手写mini-vue&lt;/a&gt; 👍🏻1643赞&lt;/li&gt;
&lt;li&gt;&lt;a href="https://juejin.cn/post/6909247394904702984" title="https://juejin.cn/post/6909247394904702984"&gt;【Vue3官方教程】🎄万字笔记 | 同步导学视频&lt;/a&gt; - 👍🏻1536赞&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Vue学习系列&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://juejin.cn/post/6899334776860180494" title="https://juejin.cn/post/6899334776860180494"&gt;Element3开发内幕 - Vue CLI插件开发&lt;/a&gt; 192赞&lt;/li&gt;
&lt;li&gt;&lt;a href="https://juejin.cn/post/6891885484524437518" title="https://juejin.cn/post/6891885484524437518"&gt;忙了一夜用CompositionAPI征服产品妹子花里胡哨的需求&lt;/a&gt; 129赞&lt;/li&gt;
&lt;li&gt;&lt;a href="https://juejin.cn/post/6875236411349008398" title="https://juejin.cn/post/6875236411349008398"&gt;Vue3.0全球发布会干货总结&lt;/a&gt; 286赞&lt;/li&gt;
&lt;li&gt;&lt;a href="https://juejin.cn/post/6867865667089989639" title="https://juejin.cn/post/6867865667089989639"&gt;Element3.0升级日记 - TimeLine组件&lt;/a&gt; 70赞&lt;/li&gt;
&lt;li&gt;&lt;a href="https://juejin.cn/post/6864462363039531022" title="https://juejin.cn/post/6864462363039531022"&gt;跟我一起编写Vue3版ElementUI&lt;/a&gt; 156赞&lt;/li&gt;
&lt;li&gt;&lt;a href="https://juejin.cn/post/6850037267466190856" title="https://juejin.cn/post/6850037267466190856"&gt;渐进式手敲Vue3.0框架 - 2万字以上 - 持续更新&lt;/a&gt; 93赞&lt;/li&gt;
&lt;li&gt;&lt;a href="https://juejin.cn/post/6844904191744278542" title="https://juejin.cn/post/6844904191744278542"&gt;如何参加开源项目-如何给Vue3.0提PR&lt;/a&gt; 85赞&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;硬核面试题&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://juejin.cn/post/7048191028280426526" title="https://juejin.cn/post/7048191028280426526"&gt;Day01 JS整数是怎么表示的 | 面试打卡365&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://juejin.cn/post/7048554678858022925" title="https://juejin.cn/post/7048554678858022925"&gt;Day02 - 0.1 + 0.2 === 0.3嘛 | 面试打卡365&lt;/a&gt;&lt;a href="https://juejin.cn/post/7048554678858022925" title="https://juejin.cn/post/7048554678858022925"&gt;&lt;br /&gt;
&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://juejin.cn/post/7048998409067298830" title="https://juejin.cn/post/7048998409067298830"&gt;Day03 - 数字超过最大限制的如何处理? | 面试打卡365&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://juejin.cn/post/7049383966700208165" title="https://juejin.cn/post/7049383966700208165"&gt;Day04 - 判断数据类型的方式有哪些？| 面试365&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://juejin.cn/post/7049731312801808420" title="https://juejin.cn/post/7049731312801808420"&gt;Day05 - new 一个函数发生了什么？| 面试365&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://juejin.cn/post/7050087767962976287" title="https://juejin.cn/post/7050087767962976287"&gt;Day06 - 构造函数的返回值与new实例关系 | 面试365&lt;/a&gt;&lt;a href="https://juejin.cn/post/7050087767962976287" title="https://juejin.cn/post/7050087767962976287"&gt;&lt;br /&gt;
&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://juejin.cn/post/7050476297318825992" title="https://juejin.cn/post/7050476297318825992"&gt;Day07 - 为什么箭头函数不能当构造函数 | 面试365&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://juejin.cn/post/7050861660000976904" title="https://juejin.cn/post/7050861660000976904"&gt;Day08 - 什么是闭包？如何制造闭包？&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://juejin.cn/post/7051233635608821797" title="https://juejin.cn/post/7051233635608821797"&gt;Day09 - 闭包应用1 - 制造惰性函数&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://juejin.cn/post/7051547767855906852" title="https://juejin.cn/post/7051547767855906852"&gt;Day10-闭包应用-偏应用函数与柯里化&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://juejin.cn/post/7051968010512236574" title="https://juejin.cn/post/7051968010512236574"&gt;Day11-闭包应用 - 立即执行函数IIFE&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://juejin.cn/post/7052238635671748616" title="https://juejin.cn/post/7052238635671748616"&gt;Day12 - 闭包应用4 - 类库封装&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://juejin.cn/post/7052658786477015054" title="https://juejin.cn/post/7052658786477015054"&gt;Day13 - 闭包应用6 - 构建器打包webpack&lt;/a&gt;&lt;a href="https://juejin.cn/post/7052658786477015054" title="https://juejin.cn/post/7052658786477015054"&gt;&lt;br /&gt;
&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://juejin.cn/post/7053087344827744292" title="https://juejin.cn/post/7053087344827744292"&gt;Day14 - 词法作用域、块级作用域、作用域链、静态动态作用域&lt;/a&gt;&lt;a href="https://juejin.cn/post/7053087344827744292" title="https://juejin.cn/post/7053087344827744292"&gt;&lt;br /&gt;
&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://juejin.cn/post/7053475694730280997" title="https://juejin.cn/post/7053475694730280997"&gt;Day15 - let为什么可以解决循环陷阱&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://juejin.cn/post/7053826986812112909" title="https://juejin.cn/post/7053826986812112909"&gt;Day16 - 为什么一定要有块级作用域&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://juejin.cn/post/7054194651380580389" title="https://juejin.cn/post/7054194651380580389"&gt;Day17 - let是否会造成变量提升&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://juejin.cn/post/7054525103098298404" title="https://juejin.cn/post/7054525103098298404"&gt;Day18 - this指向的多种形式&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://juejin.cn/post/7054949116295512077" title="https://juejin.cn/post/7054949116295512077"&gt;Day19 - React与this指向&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://juejin.cn/post/7055224075324489764" title="https://juejin.cn/post/7055224075324489764"&gt;Day20 - 如何实现call和apply、bind&lt;/a&gt;&lt;a href="https://juejin.cn/post/7055224075324489764" title="https://juejin.cn/post/7055224075324489764"&gt;&lt;br /&gt;
&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://juejin.cn/post/7056045978855571493" title="https://juejin.cn/post/7056045978855571493"&gt;Day21 - innerText、 nodeValue与 textContent的区别&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://juejin.cn/post/7056047002903134244" title="https://juejin.cn/post/7056047002903134244"&gt;Day22 - 语义化标签搭建wiki&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://juejin.cn/post/7056677173561655326" title="https://juejin.cn/post/7056677173561655326"&gt;Day23 - document以外的常用对象&lt;/a&gt;&lt;a href="https://juejin.cn/post/7056677173561655326" title="https://juejin.cn/post/7056677173561655326"&gt;&lt;br /&gt;
&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://juejin.cn/post/7056794350361477134" title="https://juejin.cn/post/7056794350361477134"&gt;Day24 - 图片懒加载的原理&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://juejin.cn/post/7056997859677175821" title="https://juejin.cn/post/7056997859677175821"&gt;Day25 - HTML5新特性&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://juejin.cn/post/7057410984914190350" title="https://juejin.cn/post/7057410984914190350"&gt;Day26 - Canvas 与 SVG的区别&lt;/a&gt;&lt;a href="https://juejin.cn/post/7057410984914190350" title="https://juejin.cn/post/7057410984914190350"&gt;&lt;br /&gt;
&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;天天造轮子&lt;/h2&gt;
&lt;p&gt;-&lt;a href="https://juejin.cn/post/6884138429181870093" title="https://juejin.cn/post/6884138429181870093"&gt;坚持造轮子第一天 - 模板引擎&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://juejin.cn/post/6885250789825052679" title="https://juejin.cn/post/6885250789825052679"&gt;坚持造轮子第二天 - 防抖与节流&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://juejin.cn/post/6885546581438201869" title="https://juejin.cn/post/6885546581438201869"&gt;坚持造轮子第三天 - 数据响应式&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://juejin.cn/post/6886002492577234952" title="https://juejin.cn/post/6886002492577234952"&gt;坚持造轮子第四天 - 统一状态管理&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://juejin.cn/post/6887844088335302670" title="https://juejin.cn/post/6887844088335302670"&gt;坚持造轮子第五天 - 时间旅行&lt;/a&gt;&lt;a href="https://juejin.cn/post/6887844088335302670" title="https://juejin.cn/post/6887844088335302670"&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://juejin.cn/post/6891935359651807239" title="https://juejin.cn/post/6891935359651807239"&gt;坚持造轮子第六天 - Mixin -装备合成路径&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://juejin.cn/post/6893338774088974343" title="https://juejin.cn/post/6893338774088974343"&gt;天天造轮子第七天 - 中间件实现 - Compose 的 N 种姿势&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://juejin.cn/post/6897911460656070669" title="https://juejin.cn/post/6897911460656070669"&gt;天天造轮子第八天 - Promise - 网友来稿&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://juejin.cn/post/6961961165656326152" title="https://juejin.cn/post/6961961165656326152"&gt;做了一夜动画，让大家十分钟搞懂Webpack&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;欢迎关注然叔&lt;/h1&gt;
&lt;h2&gt;公众号： 前端大班车&lt;/h2&gt;
&lt;h2&gt;B站： 全栈然叔&lt;/h2&gt;
&lt;p&gt;🔥 这是然叔最近推出的前端工程化体系课程。&lt;/p&gt;
&lt;p&gt;40h + 视频讲解。&lt;/p&gt;
&lt;p&gt;三个实战带你无死角打通前端工程化&lt;/p&gt;
&lt;p&gt;欢迎联系然叔(微信： xiaran310574 )， 也欢迎留下宝贵意见。&lt;/p&gt;
&lt;p&gt;&lt;img alt="image.png" src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/0231b01c009b4528b79b4e54ec3aa553~tplv-k3u1fbpfcp-watermark.image" /&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;我正在参与掘金技术社区创作者签约计划招募活动，&lt;a href="https://juejin.cn/post/7112770927082864653" title="https://juejin.cn/post/7112770927082864653"&gt;点击链接报名投稿&lt;/a&gt;。&lt;/li&gt;
&lt;/ul&gt;</description><author>全栈然叔</author><pubDate>Fri, 22 Jul 2022 04:51:54 GMT</pubDate></item><item><title>41岁的程序员的”毕业“走向自由职业 | 2022年中总结征文大赛</title><link>https://juejin.cn/post/7123012186884014116</link><description>&lt;hr /&gt;
&lt;h2&gt;theme: cyanosis&lt;/h2&gt;
&lt;p&gt;「时光不负，创作不停，本文正在参加&lt;a href="https://juejin.cn/post/7108989863126368286" title="https://juejin.cn/post/7108989863126368286"&gt;2022年中总结征文大赛&lt;/a&gt;」&lt;/p&gt;
&lt;h1&gt;自我介绍&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;北京土著&lt;/li&gt;
&lt;li&gt;房车两孩 (无房贷压力)&lt;/li&gt;
&lt;li&gt;41岁生日刚过， 远超江湖传说的30岁程序员退休年龄&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;2022年6月20日，然叔在严峻的经济形势下毕业。毕业后七天后过了41岁生日,正式进入“奔五”时代。&lt;/p&gt;
&lt;h1&gt;回顾”求学“之路&lt;/h1&gt;
&lt;h2&gt;富爸爸带来的讲师的冲动&lt;/h2&gt;
&lt;p&gt;然叔35岁前一直搞技术工作，参与过 711电子商务、日本野村证券(日本第一)、瑞穗银行（日本三大银行之一）等大型商业项目，也曾有过海外工作经验，并且还带领团队负责整个创业公司的技术工作，可以说是一个经历丰富的程序届老兵。
希望详细了解然叔经历的可以看我2年前的年终总结。&lt;/p&gt;
&lt;p&gt;&lt;a href="https://juejin.cn/post/6903701243361755149"&gt;39岁的夺路狂奔| 掘金年度征文&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;这次求学之路，开始于 2019年底，主要动机是看好“技术类内容分享”。嗯，不是因为年龄大了卷不动了吗？ 这个我确定不是，只是希望不再单纯靠体力挣钱，希望挣更多的钱而已。 看完《穷爸爸富爸爸》这本书，印象最深的是中文翻译者的一段经历。他说，在翻译完《穷爸爸富爸爸》后，对他的人生有了新的一层理解，他觉得人应该做有放大性的事情，不能单纯靠体力挣钱，所以他立即辞掉了自己的工作，开始了全国的讲座活动。&lt;/p&gt;
&lt;p&gt;&lt;img alt="image.png" src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/f78ebea13c384c00afca9226211e0f19~tplv-k3u1fbpfcp-watermark.image" /&gt;&lt;/p&gt;
&lt;p&gt;当然，他的行动也给我带来了极大的反思，这就犹如一个贫困潦倒的村汉看到了村口的致富标语。&lt;/p&gt;
&lt;p&gt;&lt;img alt="a6e66ed048372b36776ac561e9600741.jpeg" src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/b10243ddcac145b79fc69b8f33206d26~tplv-k3u1fbpfcp-watermark.image" /&gt;&lt;/p&gt;
&lt;p&gt;的确，作为一个技术人，只是被别人雇佣挣工资写程序，你也不是自己开公司或者做 App 自己卖。它的极限就是你的体力，很难有更大的突破。企业老板也不会通过你的贡献给你发工资，而是通过你职位的稀缺程度发给你工资。也就是说，即使你的软件给公司带来数亿元的收入，企业老板也只会根据职位在人才市场的定价给你发工资。&lt;/p&gt;
&lt;p&gt;想到这，我决定我也要做课程，做有放大性的事。&lt;/p&gt;
&lt;h2&gt;现实打脸 =&amp;gt; 借鸡生蛋&lt;/h2&gt;
&lt;p&gt;想到了就马上行动 Just Do IT，拖延症不能有。
那段时间决定尝试一下自己录课，其实我一直觉得自己口才还不错，有长期的项目经理工作中经常内部分享 + 外部讲解方案的经历。但是，我发现这和录课---那种关在一个密闭的空间 + 对着无言的屏幕说话的场景根本就是两回事。十分钟的内容录了十遍，都还是与自己满意的标准相差甚远。&lt;/p&gt;
&lt;p&gt;看来讲师也不太好当啊，强行渡劫看来不太行。教学经验的积累需要一个过程，这时候正好一家教育机构给然叔抛来了橄榄枝，我觉得这样平滑过渡应该是一个好的方案。&lt;/p&gt;
&lt;h2&gt;从”菜鸡“ =&amp;gt; "受人欢迎"&lt;/h2&gt;
&lt;p&gt;其实一开始的教学并不太顺利，无论是课程的内容或是讲课水平。我记得那个时候课程有一个评分系统，一般 92分可以拿到额外的奖金。其实对于教学来讲，92分应该是个及格线，因为如果学生觉得老师不值得佩服基本没啥教学效果。我一开始非常尴尬，只得到 82 分，也就是说很多人不满意。我记得那个时候我会回访所以给我负面评价的学员，并且有一个 Excel 把所有的负面评价都记录下来。我的课程经过了数次迭代，最终在一年后最高得分得到了 99.5 分。&lt;/p&gt;
&lt;h2&gt;做”非主流实战派“讲师&lt;/h2&gt;
&lt;p&gt;&lt;img alt="image.png" src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/7e940af7ce484a1192cc6800a58b2bcf~tplv-k3u1fbpfcp-watermark.image" /&gt;&lt;/p&gt;
&lt;p&gt;来到讲课行业才发现，怎么讲师届和相声届也差不多呢。很多德艺双馨的艺术家，居然没啥实战经验，就靠别人写好的旧剧本改来改去。我想，我坚决不能融入这种圈子，自己没弄过还拿着别人的教案硬讲，这不成了只看球不踢球的中国球迷了吗？&lt;/p&gt;
&lt;p&gt;&lt;img alt="image.png" src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/e861e2839b8c4e08a27b75385c30a06e~tplv-k3u1fbpfcp-watermark.image" /&gt;&lt;/p&gt;
&lt;p&gt;我认为应该把讲课当做一个自我完善的过程，应该是自我学习经验的分享和传授。
实际上，讲课是自己能力提高的机会，根据学习吸收金字塔，转述他人是吸收的最高形态。&lt;/p&gt;
&lt;p&gt;&lt;img alt="image.png" src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/1a3dc641dac8422b9268ec718598e93e~tplv-k3u1fbpfcp-watermark.image" /&gt;&lt;/p&gt;
&lt;p&gt;为了达到这个目标，在教学的同时我并没有放弃自身的提高。
比如课程中需要讲解Vue3源码，我就会尝试给Vue3项目提交贡献，最终成为 Vue3 的代码贡献者，遇到组件库实战，我们也会建自己的开源组件库。&lt;/p&gt;
&lt;h1&gt;开启自由职业之路&lt;/h1&gt;
&lt;p&gt;毕业之后，我决定正式开启我的自由职业之路。&lt;/p&gt;
&lt;p&gt;主要收益：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;收费视频课程&lt;/li&gt;
&lt;li&gt;广告收入&lt;/li&gt;
&lt;li&gt;开源赞助&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;短期收入来源以收费视频内容为主，目前在搞的是一套完整的工程化实战课程。&lt;/p&gt;
&lt;p&gt;&lt;img alt="image.png" src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/9a815ca2496e411294e562db28ad2079~tplv-k3u1fbpfcp-watermark.image" /&gt;&lt;/p&gt;
&lt;p&gt;长期来讲，我希望能达到Soho研发与讲课的平衡发展。因为我不想成为主流讲师，需要不断的开发积累。我希望能成为流行开源项目的核心贡献者，或者长期维护一个流行的开源项目。&lt;/p&gt;
&lt;p&gt;另外，我还在正在写一本小册力争八月份发表，到时大家一定要多多支持然叔呀。&lt;/p&gt;
&lt;h1&gt;下半年规划&lt;/h1&gt;
&lt;p&gt;发布一个小册 - 希望大家支持；&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;英语学习 - 为了学习先进国家的科学技术；&lt;/li&gt;
&lt;li&gt;Github  - 1k+ star 非资料型项目；&lt;/li&gt;
&lt;li&gt;深度参与开源项目 - 初步确定是Vite生态；&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;往年优秀文章汇总&lt;/h1&gt;
&lt;h2&gt;征文获奖 &amp;amp; 千赞文章&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://juejin.cn/post/7038627294197317662" title="彻底搞懂HTTP协议 - 天天造轮子"&gt;彻底搞懂HTTP协议 - 天天造轮子&lt;/a&gt; -🔥月冠军&lt;/li&gt;
&lt;li&gt;&lt;a href="https://juejin.cn/post/6961961165656326152"&gt;做了一夜动画，让大家十分钟搞懂Webpack&lt;/a&gt; -  👍🏻1471赞&lt;/li&gt;
&lt;li&gt;&lt;a href="https://juejin.cn/post/6911897255087702030"&gt;【Vue官方教程笔记】- 尤雨溪手写mini-vue&lt;/a&gt;  👍🏻1643赞&lt;/li&gt;
&lt;li&gt;&lt;a href="https://juejin.cn/post/6909247394904702984"&gt;【Vue3官方教程】🎄万字笔记 | 同步导学视频&lt;/a&gt;  - 👍🏻1536赞&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Vue学习系列&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://juejin.cn/post/6899334776860180494"&gt;Element3开发内幕 - Vue CLI插件开发&lt;/a&gt; 192赞&lt;/li&gt;
&lt;li&gt;&lt;a href="https://juejin.cn/post/6891885484524437518"&gt;忙了一夜用CompositionAPI征服产品妹子花里胡哨的需求&lt;/a&gt;  129赞&lt;/li&gt;
&lt;li&gt;&lt;a href="https://juejin.cn/post/6875236411349008398"&gt;Vue3.0全球发布会干货总结&lt;/a&gt; 286赞&lt;/li&gt;
&lt;li&gt;&lt;a href="https://juejin.cn/post/6867865667089989639"&gt;Element3.0升级日记 - TimeLine组件&lt;/a&gt; 70赞&lt;/li&gt;
&lt;li&gt;&lt;a href="https://juejin.cn/post/6864462363039531022"&gt;跟我一起编写Vue3版ElementUI&lt;/a&gt; 156赞&lt;/li&gt;
&lt;li&gt;&lt;a href="https://juejin.cn/post/6850037267466190856"&gt;渐进式手敲Vue3.0框架 - 2万字以上 - 持续更新&lt;/a&gt; 93赞&lt;/li&gt;
&lt;li&gt;&lt;a href="https://juejin.cn/post/6844904191744278542"&gt;如何参加开源项目-如何给Vue3.0提PR&lt;/a&gt; 85赞&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;硬核面试题&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://juejin.cn/post/7048191028280426526" title="Day01 JS整数是怎么表示的 | 面试打卡365"&gt;Day01 JS整数是怎么表示的 | 面试打卡365&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://juejin.cn/post/7048554678858022925" title="Day02 - 0.1 + 0.2 === 0.3嘛 | 面试打卡365"&gt;Day02 - 0.1 + 0.2 === 0.3嘛 | 面试打卡365&lt;/a&gt;
&lt;a href="https://juejin.cn/post/7048554678858022925"&gt;&lt;br /&gt;
&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://juejin.cn/post/7048998409067298830" title="Day03 - 数字超过最大限制的如何处理? | 面试打卡365"&gt;Day03 - 数字超过最大限制的如何处理? | 面试打卡365&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://juejin.cn/post/7049383966700208165" title="Day04 - 判断数据类型的方式有哪些？| 面试365"&gt;Day04 - 判断数据类型的方式有哪些？| 面试365&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://juejin.cn/post/7049731312801808420" title=" Day05 - new 一个函数发生了什么？| 面试365"&gt;Day05 - new 一个函数发生了什么？| 面试365&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://juejin.cn/post/7050087767962976287" title="Day06 - 构造函数的返回值与new实例关系 | 面试365"&gt;Day06 - 构造函数的返回值与new实例关系 | 面试365&lt;/a&gt;&lt;a href="https://juejin.cn/post/7050087767962976287"&gt;&lt;br /&gt;
&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://juejin.cn/post/7050476297318825992" title="Day07 - 为什么箭头函数不能当构造函数 | 面试365"&gt;Day07 - 为什么箭头函数不能当构造函数 | 面试365&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://juejin.cn/post/7050861660000976904" title="Day08 - 什么是闭包？如何制造闭包？"&gt;Day08 - 什么是闭包？如何制造闭包？&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://juejin.cn/post/7051233635608821797" title="Day09 - 闭包应用1 - 制造惰性函数"&gt;Day09 - 闭包应用1 - 制造惰性函数&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://juejin.cn/post/7051547767855906852" title="Day10-闭包应用-偏应用函数与柯里化"&gt;Day10-闭包应用-偏应用函数与柯里化&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://juejin.cn/post/7051968010512236574" title="Day11-闭包应用 - 立即执行函数IIFE"&gt;Day11-闭包应用 - 立即执行函数IIFE&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://juejin.cn/post/7052238635671748616" title="Day12 - 闭包应用4 - 类库封装"&gt;Day12 - 闭包应用4 - 类库封装&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://juejin.cn/post/7052658786477015054" title="Day13 - 闭包应用6 - 构建器打包webpack"&gt;Day13 - 闭包应用6 - 构建器打包webpack&lt;/a&gt;
&lt;a href="https://juejin.cn/post/7052658786477015054"&gt;&lt;br /&gt;
&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://juejin.cn/post/7053087344827744292" title="Day14 - 词法作用域、块级作用域、作用域链、静态动态作用域"&gt;Day14 - 词法作用域、块级作用域、作用域链、静态动态作用域&lt;/a&gt;
&lt;a href="https://juejin.cn/post/7053087344827744292"&gt;&lt;br /&gt;
&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://juejin.cn/post/7053475694730280997" title="Day15 - let为什么可以解决循环陷阱"&gt;Day15 - let为什么可以解决循环陷阱&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://juejin.cn/post/7053826986812112909" title="Day16 - 为什么一定要有块级作用域"&gt;Day16 - 为什么一定要有块级作用域&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://juejin.cn/post/7054194651380580389" title="Day17 - let是否会造成变量提升"&gt;Day17 - let是否会造成变量提升&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://juejin.cn/post/7054525103098298404" title="Day18 - this指向的多种形式"&gt;Day18 - this指向的多种形式&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://juejin.cn/post/7054949116295512077" title="Day19 - React与this指向"&gt;Day19 - React与this指向&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://juejin.cn/post/7055224075324489764" title="Day20 - 如何实现call和apply、bind"&gt;Day20 - 如何实现call和apply、bind&lt;/a&gt;
&lt;a href="https://juejin.cn/post/7055224075324489764"&gt;&lt;br /&gt;
&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://juejin.cn/post/7056045978855571493" title="Day21 - innerText、 nodeValue与 textContent的区别"&gt;Day21 - innerText、 nodeValue与 textContent的区别&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://juejin.cn/post/7056047002903134244" title="Day22 - 语义化标签搭建wiki"&gt;Day22 - 语义化标签搭建wiki&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://juejin.cn/post/7056677173561655326" title="Day23 - document以外的常用对象"&gt;Day23 - document以外的常用对象&lt;/a&gt;
&lt;a href="https://juejin.cn/post/7056677173561655326"&gt;&lt;br /&gt;
&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://juejin.cn/post/7056794350361477134" title="Day24 - 图片懒加载的原理"&gt;Day24 - 图片懒加载的原理&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://juejin.cn/post/7056997859677175821" title="Day25 - HTML5新特性"&gt;Day25 - HTML5新特性&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://juejin.cn/post/7057410984914190350" title="Day26 - Canvas 与 SVG的区别"&gt;Day26 - Canvas 与 SVG的区别&lt;/a&gt;&lt;a href="https://juejin.cn/post/7057410984914190350"&gt;&lt;br /&gt;
&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;天天造轮子&lt;/h2&gt;
&lt;p&gt;-&lt;a href="https://juejin.cn/post/6884138429181870093" title="坚持造轮子第一天 - 模板引擎"&gt;坚持造轮子第一天 - 模板引擎&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://juejin.cn/post/6885250789825052679" title="坚持造轮子第二天 - 防抖与节流"&gt;坚持造轮子第二天 - 防抖与节流&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://juejin.cn/post/6885546581438201869" title="坚持造轮子第三天 - 数据响应式"&gt;坚持造轮子第三天 - 数据响应式&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://juejin.cn/post/6886002492577234952" title="坚持造轮子第四天 - 统一状态管理"&gt;坚持造轮子第四天 - 统一状态管理&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://juejin.cn/post/6887844088335302670" title="坚持造轮子第五天 - 时间旅行"&gt;坚持造轮子第五天 - 时间旅行&lt;/a&gt;
&lt;a href="https://juejin.cn/post/6887844088335302670"&gt;
&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://juejin.cn/post/6891935359651807239" title="坚持造轮子第六天 - Mixin -装备合成路径"&gt;坚持造轮子第六天 - Mixin -装备合成路径&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://juejin.cn/post/6893338774088974343" title="天天造轮子第七天 - 中间件实现 - Compose 的 N 种姿势"&gt;天天造轮子第七天 - 中间件实现 - Compose 的 N 种姿势&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://juejin.cn/post/6897911460656070669" title="天天造轮子第八天 - Promise  - 网友来稿"&gt;天天造轮子第八天 - Promise - 网友来稿&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://juejin.cn/post/6961961165656326152" title="做了一夜动画，让大家十分钟搞懂Webpack"&gt;做了一夜动画，让大家十分钟搞懂Webpack&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;为然叔💪🏻 打Call  ！！！&lt;/h1&gt;
&lt;h1&gt;为然叔💪🏻 打Call  ！！！&lt;/h1&gt;
&lt;h1&gt;为然叔💪🏻 打Call  ！！！&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;我正在参与掘金技术社区创作者签约计划招募活动，&lt;a href="https://juejin.cn/post/7112770927082864653" title="https://juejin.cn/post/7112770927082864653"&gt;点击链接报名投稿&lt;/a&gt;。&lt;/li&gt;
&lt;/ul&gt;</description><author>全栈然叔</author><pubDate>Thu, 21 Jul 2022 18:05:22 GMT</pubDate></item><item><title>Day26 - Canvas 与 SVG的区别</title><link>https://juejin.cn/post/7057410984914190350</link><description>&lt;p&gt;「这是我参与2022首次更文挑战的第8天，活动详情查看：&lt;a href="https://juejin.cn/post/7052884569032392740" title="https://juejin.cn/post/7052884569032392740"&gt;2022首次更文挑战&lt;/a&gt;」&lt;/p&gt;
&lt;h2&gt;SVG&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;SVG 指可伸缩矢量图形 (Scalable Vector Graphics)。
SVG 是使用 XML 来描述二维图形和绘图程序的语言&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;&lt;code class="language-html"&gt;&amp;lt;svg width="400" height="110"&amp;gt;
  &amp;lt;rect
    width="150"
    height="75"
    style="fill: rgb(0, 0, 255); stroke-width: 3; stroke: rgb(0, 0, 0)"
  /&amp;gt;
&amp;lt;/svg&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;Canvas&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;HTML [canvas] 标签用于通过脚本（通常是 JavaScript）动态绘制图形。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;&lt;code class="language-html"&gt;&amp;lt;canvas id="myCanvas" width="200" height="100"&amp;gt;&amp;lt;/canvas&amp;gt;
&amp;lt;script type="text/javascript"&amp;gt;
  var c = document.getElementById("myCanvas");
  var cxt = c.getContext("2d");
  cxt.fillStyle = "#FF0000";
  cxt.fillRect(0, 0, 150, 75);
&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;Canvas优势&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;绘制出来的图形是位图具有很好的渲染性能&lt;/li&gt;
&lt;li&gt;适合数据量比较大（&amp;gt;1000）&lt;/li&gt;
&lt;li&gt;大量图形高频率交互&lt;/li&gt;
&lt;li&gt;适合游戏&lt;/li&gt;
&lt;li&gt;可以导出jpg/png图片&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Echarts中的热力图&lt;/h3&gt;
&lt;p&gt;&lt;img alt="" src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/28cd8e2e6b2c48db84557b10584aef63~tplv-k3u1fbpfcp-zoom-1.image" /&gt;&lt;/p&gt;
&lt;h3&gt;Echarts中的炫光拖尾&lt;/h3&gt;
&lt;p&gt;&lt;img alt="" src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/f7b19e2067b740b69b96238d1f0b3238~tplv-k3u1fbpfcp-zoom-1.image" /&gt;&lt;/p&gt;
&lt;h2&gt;SVG优势&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;矢量图放大不失真&lt;/li&gt;
&lt;li&gt;支持事件处理器&lt;/li&gt;
&lt;li&gt;文字独立、可编辑可搜索&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;案例选择了一个Vue3中的一个demo，通过响应式数据直接渲染svg，非常的精彩。&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-html"&gt;&amp;lt;g&amp;gt;
  &amp;lt;polygon :points="points"&amp;gt;&amp;lt;/polygon&amp;gt;
  &amp;lt;circle cx="100" cy="100" r="80"&amp;gt;&amp;lt;/circle&amp;gt;
  &amp;lt;axis-label
              v-for="(stat, index) in stats"
              :stat="stat"
              :index="index"
              :total="stats.length"&amp;gt;
  &amp;lt;/axis-label&amp;gt;
&amp;lt;/g&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class="language-js"&gt;function valueToPoint (value, index, total) {
  var x     = 0
  var y     = -value * 0.8
  var angle = Math.PI * 2 / total * index
  var cos   = Math.cos(angle)
  var sin   = Math.sin(angle)
  var tx    = x * cos - y * sin + 100
  var ty    = x * sin + y * cos + 100
  return {
    x: tx,
    y: ty
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;对比表格&lt;/h2&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;Canvas&lt;/th&gt;
&lt;th&gt;SVG&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;大数据量&lt;/td&gt;
&lt;td&gt;✅&lt;/td&gt;
&lt;td&gt;❌&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;高交互场景&lt;/td&gt;
&lt;td&gt;✅&lt;/td&gt;
&lt;td&gt;❌&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;可导出图片&lt;/td&gt;
&lt;td&gt;✅&lt;/td&gt;
&lt;td&gt;❌&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;放大不失真&lt;/td&gt;
&lt;td&gt;❌&lt;/td&gt;
&lt;td&gt;✅&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;支持事件处理&lt;/td&gt;
&lt;td&gt;❌&lt;/td&gt;
&lt;td&gt;✅&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;文字可编辑&lt;/td&gt;
&lt;td&gt;❌&lt;/td&gt;
&lt;td&gt;✅&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;</description><author>全栈然叔</author><pubDate>Tue, 25 Jan 2022 23:20:03 GMT</pubDate></item><item><title>Day25 - HTML5新特性</title><link>https://juejin.cn/post/7056997859677175821</link><description>&lt;p&gt;「这是我参与2022首次更文挑战的第8天，活动详情查看：&lt;a href="https://juejin.cn/post/7052884569032392740" title="https://juejin.cn/post/7052884569032392740"&gt;2022首次更文挑战&lt;/a&gt;」&lt;/p&gt;
&lt;h3&gt;HTML5的重要性&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;产生于1990年&lt;/li&gt;
&lt;li&gt;1997年HTML4出现并且维持了10年时间&lt;/li&gt;
&lt;li&gt;2008年 HTML5出现，2012年趋于稳定 （移动互联的红利期）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="image-20220125123233101" src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/37d465b9af7542e48e542f2da9ad030e~tplv-k3u1fbpfcp-zoom-1.image" /&gt;&lt;/p&gt;
&lt;h2&gt;HTML5新特性&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;https://www.w3school.com.cn/html/&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;语义化标签&lt;/h3&gt;
&lt;p&gt;&lt;img alt="image-20220125115939776" src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/2d5ec17896d648fa911221cb2a9c8f21~tplv-k3u1fbpfcp-zoom-1.image" /&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-html"&gt;&amp;lt;div class="header"&amp;gt;Header&amp;lt;/div&amp;gt;
  &amp;lt;div class="nav"&amp;gt;Nav&amp;lt;/div&amp;gt;
  &amp;lt;div class="body"&amp;gt;
    &amp;lt;div class="article"&amp;gt;
      Article
      &amp;lt;div class="section"&amp;gt;
        Section
      &amp;lt;/div&amp;gt;
    &amp;lt;/div&amp;gt;
    &amp;lt;div class="aside"&amp;gt;
      Aside
    &amp;lt;/div&amp;gt;
  &amp;lt;/div&amp;gt;
&amp;lt;div class="footer"&amp;gt;Footer&amp;lt;/div&amp;gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class="language-html"&gt;&amp;lt;header&amp;gt;Header&amp;lt;/header&amp;gt;
  &amp;lt;nav&amp;gt;Nav&amp;lt;/nav&amp;gt;
  &amp;lt;div class="body"&amp;gt;
    &amp;lt;article&amp;gt;
      Article
      &amp;lt;section&amp;gt;Section&amp;lt;/section&amp;gt;
    &amp;lt;/article&amp;gt;
    &amp;lt;aside&amp;gt;Aside&amp;lt;/aside&amp;gt;
  &amp;lt;/div&amp;gt;
&amp;lt;footer&amp;gt;Footer&amp;lt;/footer&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;清晰易读&lt;/li&gt;
&lt;li&gt;有利于SEO，方便搜索引擎识别页面结构&lt;/li&gt;
&lt;li&gt;方便设备解析、比如盲人阅读&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;表单功能增强&lt;/h3&gt;
&lt;pre&gt;&lt;code class="language-html"&gt; &amp;lt;form action="" method="get"&amp;gt;
    &amp;lt;p&amp;gt;邮箱标签: &amp;lt;input type="email"&amp;gt;&amp;lt;/p&amp;gt;
    &amp;lt;p&amp;gt;数字标签: &amp;lt;input type="number"&amp;gt;&amp;lt;/p&amp;gt;
    &amp;lt;p&amp;gt;滑动条标签: &amp;lt;input type="range"&amp;gt;&amp;lt;/p&amp;gt;
    &amp;lt;p&amp;gt;搜索框标签: &amp;lt;input type="search"&amp;gt;&amp;lt;/p&amp;gt;
    &amp;lt;p&amp;gt;日期框: &amp;lt;input type="date"&amp;gt;&amp;lt;/p&amp;gt;
    &amp;lt;p&amp;gt;星期框: &amp;lt;input type="week"&amp;gt;&amp;lt;/p&amp;gt;
    &amp;lt;p&amp;gt;月份框: &amp;lt;input type="month"&amp;gt;&amp;lt;/p&amp;gt;
    &amp;lt;p&amp;gt;颜色框: &amp;lt;input type="color"&amp;gt;&amp;lt;/p&amp;gt;
    &amp;lt;p&amp;gt;网址框: &amp;lt;input type="url"&amp;gt;&amp;lt;/p&amp;gt;
    &amp;lt;div&amp;gt;
      &amp;lt;input type="submit"&amp;gt;
      &amp;lt;input type="reset"&amp;gt;
    &amp;lt;/div&amp;gt;
&amp;lt;/form&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;音视频标签&lt;/h3&gt;
&lt;p&gt;在h5之前，网页中内嵌音视频普遍会采用flash实现。&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-js"&gt;&amp;lt;video width="320" height="240" controls="controls"&amp;gt;
  &amp;lt;source src="movie.mp4" type="video/mp4" /&amp;gt;
&amp;lt;/video&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;画布 - Canvas+ SVG&lt;/h3&gt;
&lt;p&gt;HTML5 的 canvas 元素使用 JavaScript 在网页上绘制图像。&lt;/p&gt;
&lt;p&gt;画布是一个矩形区域，您可以控制其每一像素。&lt;/p&gt;
&lt;p&gt;canvas 拥有多种绘制路径、矩形、圆形、字符以及添加图像的方法。&lt;/p&gt;
&lt;p&gt;这个后面会专门出一期和svg的对比。&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-html"&gt;&amp;lt;canvas id="myCanvas" width="200" height="100"&amp;gt;&amp;lt;/canvas&amp;gt;
&amp;lt;script type="text/javascript"&amp;gt;
var c=document.getElementById("myCanvas");
var cxt=c.getContext("2d");
cxt.fillStyle="#FF0000";
cxt.fillRect(0,0,150,75);
&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;拖放&lt;/h3&gt;
&lt;p&gt;拖放（Drag 和 Drop）是很常见的特性。它指的是您抓取某物并拖入不同的位置。拖放是 HTML5 标准的组成部分：任何元素都是可拖放的。&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-html"&gt;&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html&amp;gt;
  &amp;lt;head&amp;gt;
    &amp;lt;style type="text/css"&amp;gt;
      #div1 {
        width: 120px;
        height: 120px;
        padding: 10px;
        border: 1px solid #aaaaaa;
      }
    &amp;lt;/style&amp;gt;
    &amp;lt;script type="text/javascript"&amp;gt;
      function allowDrop(ev) {
        ev.preventDefault();
      }

      function drag(ev) {
        ev.dataTransfer.setData("Text", ev.target.id);
      }

      function drop(ev) {
        ev.preventDefault();
        var data = ev.dataTransfer.getData("Text");
        ev.target.appendChild(document.getElementById(data));
      }
    &amp;lt;/script&amp;gt;
  &amp;lt;/head&amp;gt;
  &amp;lt;body&amp;gt;
    &amp;lt;p&amp;gt;请把图片拖放到矩形中：&amp;lt;/p&amp;gt;

    &amp;lt;div id="div1" ondrop="drop(event)" ondragover="allowDrop(event)"&amp;gt;&amp;lt;/div&amp;gt;
    &amp;lt;br /&amp;gt;
    &amp;lt;img
      id="drag1"
      src="img.png"
      draggable="true"
      ondragstart="drag(event)"
    /&amp;gt;
  &amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;本地存储&lt;/h3&gt;
&lt;p&gt;通过本地存储（Local Storage），web 应用程序能够在用户浏览器中对数据进行本地的存储。&lt;/p&gt;
&lt;p&gt;在 HTML5 之前，应用程序数据只能存储在 cookie 中，包括每个服务器请求。本地存储则更安全，并且可在不影响网站性能的前提下将大量数据存储于本地。&lt;/p&gt;
&lt;p&gt;与 cookie 不同，存储限制要大得多（至少5MB），并且信息不会被传输到服务器。&lt;/p&gt;
&lt;p&gt;本地存储经由起源地（origin）（经由域和协议）。所有页面，从起源地，能够存储和访问相同的数据。&lt;/p&gt;
&lt;h3&gt;Web Worker&lt;/h3&gt;
&lt;p&gt;当在 HTML 页面中执行脚本时，页面是不可响应的，直到脚本已完成。&lt;/p&gt;
&lt;p&gt;Web worker 是运行在后台的 JavaScript，独立于其他脚本，不会影响页面的性能。您可以继续做任何愿意做的事情：点击、选取内容等等，而此时 web worker 运行在后台。&lt;/p&gt;
&lt;h4&gt;地理定位&lt;/h4&gt;
&lt;p&gt;HTML5 Geolocation API 用于获得用户的地理位置。&lt;/p&gt;
&lt;p&gt;鉴于该特性可能侵犯用户的隐私，除非用户同意，否则用户位置信息是不可用的。&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-js"&gt;&amp;lt;script&amp;gt;
var x=document.getElementById("demo");
function getLocation()
  {
  if (navigator.geolocation)
    {
    navigator.geolocation.getCurrentPosition(showPosition);
    }
  else{x.innerHTML="Geolocation is not supported by this browser.";}
  }
function showPosition(position)
  {
  x.innerHTML="Latitude: " + position.coords.latitude +
  "&amp;lt;br /&amp;gt;Longitude: " + position.coords.longitude;
  }
&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h4&gt;datalist&lt;/h4&gt;
&lt;p&gt;只不过我们经常使用别人已经封装好的 UI 组件，所以就没怎么用过，此标签就是 HTML5 封装的 Select API。&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-html"&gt;&amp;lt;input id="fruits" list="list" /&amp;gt;
&amp;lt;datalist id="list"&amp;gt;
  &amp;lt;option value="苹果"&amp;gt;&amp;lt;/option&amp;gt;
  &amp;lt;option value="香蕉"&amp;gt;&amp;lt;/option&amp;gt;
  &amp;lt;option value="山楂"&amp;gt;&amp;lt;/option&amp;gt;
&amp;lt;/datalist&amp;gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img alt="image-20220125122459777" src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/0551b720a2104d1ab07a42696a096f13~tplv-k3u1fbpfcp-zoom-1.image" /&gt;&lt;/p&gt;
&lt;h4&gt;可编辑内容&lt;/h4&gt;
&lt;p&gt;它被广泛的应用，比如很多网页编辑器，内容切换编辑状态等等，都可以通过这个属性来实现。&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-js"&gt;&amp;lt;div class="edit" contenteditable='true'&amp;gt;&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img alt="123" src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/7585b7ca63e24f1db53a375e15665d9f~tplv-k3u1fbpfcp-zoom-1.image" /&gt;&lt;/p&gt;
&lt;h2&gt;面试攻略&lt;/h2&gt;
&lt;p&gt;HTML5是十年前的新技术。有些应用已经非常普遍了。但是还有很多技术还在摸索阶段，大家有机会可以看看Vite中的HMR技术使用了什么样的H5新特性。&lt;/p&gt;</description><author>全栈然叔</author><pubDate>Mon, 24 Jan 2022 20:37:57 GMT</pubDate></item><item><title>Day24 - 图片懒加载的原理</title><link>https://juejin.cn/post/7056794350361477134</link><description>&lt;p&gt;「这是我参与2022首次更文挑战的第7天，活动详情查看：&lt;a href="https://juejin.cn/post/7052884569032392740" title="https://juejin.cn/post/7052884569032392740"&gt;2022首次更文挑战&lt;/a&gt;」&lt;/p&gt;
&lt;h2&gt;知识讲解&lt;/h2&gt;
&lt;h3&gt;Why&lt;/h3&gt;
&lt;p&gt;懒加载是一种延迟加载技术，在一个长网页中存在大量图片影响加载速度和用户体验。懒加载是一种优化网页性能的方式。大量用在电商场景中。&lt;/p&gt;
&lt;p&gt;&lt;img alt="image-20220124221805647" src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/5de3505f236a427fb12064edb22d8d50~tplv-k3u1fbpfcp-zoom-1.image" /&gt;&lt;/p&gt;
&lt;p&gt;例如京东的首页，只需要第一时间完成首屏展示的任务就可以了，其他图片可以随着页面的滚动下载就可以了。&lt;/p&gt;
&lt;h3&gt;What&lt;/h3&gt;
&lt;p&gt;懒加载原理就是将一次性下载全部通篇改为根据判断可视区域下载。也就是说看到哪下载到哪。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;图片的src不设置真实的路径&lt;/li&gt;
&lt;li&gt;图片的真实路径设置在其他属性中比如： data-original&lt;/li&gt;
&lt;li&gt;通过js判断图片是否进入可视区域。&lt;/li&gt;
&lt;li&gt;如果图片进入可视区域将图片src换成真实路径&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;HOW&lt;/h3&gt;
&lt;p&gt;Step01: 图片的src不设置真实的路径，真实路径设置data-original&lt;/p&gt;
&lt;pre&gt;&lt;code&gt; &amp;nbsp; &amp;nbsp;&amp;lt;img
 &amp;nbsp; &amp;nbsp; &amp;nbsp;src=""
 &amp;nbsp; &amp;nbsp; &amp;nbsp;class="image-item"
 &amp;nbsp; &amp;nbsp; &amp;nbsp;lazyload="true"
 &amp;nbsp; &amp;nbsp; &amp;nbsp;data-original="https://gitee.com/josephxia/picgo/raw/master/juejin/image-20220124221805647.png?a=1"
 &amp;nbsp; &amp;nbsp;/&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Step02:通过js判断图片是否进入可视区域,如果图片进入可视区域将图片src换成真实路径&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;var viewHeight = document.body.clientHeight;
//获取可视区高度
function lazyload() {
 &amp;nbsp;console.log('load')
 &amp;nbsp;var list = document.querySelectorAll("img[data-original][lazyload]");
 &amp;nbsp;list.forEach((item) =&amp;gt; {
 &amp;nbsp; &amp;nbsp;if (item.dataset.original === "") return;
 &amp;nbsp; &amp;nbsp;var rect = item.getBoundingClientRect();
 &amp;nbsp; &amp;nbsp;console.log('图片相对位置top',rect.top)
 &amp;nbsp; &amp;nbsp;// 获得图片相对浏览器视窗的位置
 &amp;nbsp; &amp;nbsp;if (rect.bottom &amp;gt;= 0 &amp;amp;&amp;amp; rect.top &amp;lt; viewHeight) {
 &amp;nbsp; &amp;nbsp; &amp;nbsp;var img = new Image();
 &amp;nbsp; &amp;nbsp; &amp;nbsp;img.src = item.dataset.original;
 &amp;nbsp; &amp;nbsp; &amp;nbsp;img.onload = function () {
 &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;item.src = img.src;
 &amp;nbsp; &amp;nbsp;  };
 &amp;nbsp; &amp;nbsp; &amp;nbsp;item.removeAttribute("data-original");
 &amp;nbsp; &amp;nbsp; &amp;nbsp;//移除属性，下次不再遍历
 &amp;nbsp; &amp;nbsp; &amp;nbsp;item.removeAttribute("lazyload");
 &amp;nbsp;  }
  });
}
lazyload(); //刚开始还没滚动屏幕时，要先触发一次函数，初始化首页的页面图片
document.addEventListener("scroll", lazyload);
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;面试攻略&lt;/h2&gt;
&lt;p&gt;懒加载技术大量应用在电商首页的长页面中，大家一定要明白原理并且亲自动手试试这段代码。&lt;/p&gt;
&lt;p&gt;\&lt;/p&gt;</description><author>全栈然叔</author><pubDate>Mon, 24 Jan 2022 07:26:39 GMT</pubDate></item><item><title>Day23 - document以外的常用对象</title><link>https://juejin.cn/post/7056677173561655326</link><description>&lt;h1&gt;Day23 - document以外的常用对象&lt;/h1&gt;
&lt;p&gt;「这是我参与2022首次更文挑战的第6天，活动详情查看：&lt;a href="https://juejin.cn/post/7052884569032392740" title="https://juejin.cn/post/7052884569032392740"&gt;2022首次更文挑战&lt;/a&gt;」&lt;/p&gt;
&lt;h2&gt;知识讲解&lt;/h2&gt;
&lt;p&gt;&lt;img alt="image-20220124154025948" src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/0c9e73519c4c475e9bcf6770c235c502~tplv-k3u1fbpfcp-zoom-1.image" /&gt;&lt;/p&gt;
&lt;p&gt;window对象以外的常用对象可以大体上分为两类，一类是BOM模型中的对象。&lt;/p&gt;
&lt;h3&gt;BOM模型&lt;/h3&gt;
&lt;h4&gt;location对象&lt;/h4&gt;
&lt;p&gt;Location 对象包含有关当前 URL 的信息。&lt;/p&gt;
&lt;p&gt;属性。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;location.hostname; // 返回 web 主机的域名
location.port; &amp;nbsp; &amp;nbsp; // 返回 web 主机的端口 （80 或 443）
location.protocol; // 返回所使用的 web 协议（http:// 或 https://）
location.href; &amp;nbsp; &amp;nbsp; // 返回当前页面的url地址
location.host; &amp;nbsp; &amp;nbsp; // 返回当前页面url的主机ip
location.pathname; // 返回当前页面的路径和文件名
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;方法&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;location.assign('about:/blank') // 载入一个新文档
location.reload() // 重新载入文档
location.replace('http://www.baidu.com') // 替换
&lt;/code&gt;&lt;/pre&gt;
&lt;h4&gt;navigator对象&lt;/h4&gt;
&lt;p&gt;Navigator 对象包含有关浏览器的信息&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;navigator.appCodeName; //浏览器代码名
navigator.appName; &amp;nbsp; &amp;nbsp; //浏览器步伐名
navigator.language; &amp;nbsp; &amp;nbsp;//浏览器当前语言
navigator.platform; &amp;nbsp; &amp;nbsp;//操作体系类型win32
navigator.plugins;
navigator.appVersion; &amp;nbsp; &amp;nbsp; //浏览器版本(包括 体系版本)
navigator.userAgent; &amp;nbsp; &amp;nbsp; &amp;nbsp;//用户代理头的字符串表示
navigator.onLine; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; //用户否在线
navigator.cookieEnabled; &amp;nbsp;//浏览器是否撑持cookie
navigator.mimeTypes;
&lt;/code&gt;&lt;/pre&gt;
&lt;h4&gt;screen对象&lt;/h4&gt;
&lt;p&gt;它包含客户端显示器的信息，比如像素宽度和像素高度。 history对象： 表示当前窗口首次使用以来用户的导航历史记录。每个 window 都有自己的 history 对象。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;screen.availWidth; &amp;nbsp; &amp;nbsp;// 返回浏览器可用宽度 像素为单位 1366
screen.availHeight; &amp;nbsp; // 728 &amp;nbsp;
screen.availTop; &amp;nbsp; &amp;nbsp; &amp;nbsp;// 0
screen.availLeft; &amp;nbsp; &amp;nbsp; // 0
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;WebAPI&lt;/h3&gt;
&lt;p&gt;webapi家族其实有很多的成员具体可以看看下面的文档。&lt;/p&gt;
&lt;p&gt;&lt;a href="https://developer.mozilla.org/zh-CN/docs/Web/API"&gt;https://developer.mozilla.org/zh-CN/docs/Web/API&lt;/a&gt;&lt;/p&gt;
&lt;h4&gt;storage对象&lt;/h4&gt;
&lt;p&gt;本地存储，有临时存储sessionStorage，永久存储localStorag&lt;/p&gt;
&lt;h4&gt;fetch&lt;/h4&gt;
&lt;p&gt;Fetch本质上是一种标准，该标准定义了请求、响应和绑定的流程。 Fetch标准还定义了Fetch () JavaScript API&lt;/p&gt;
&lt;h4&gt;console&lt;/h4&gt;
&lt;p&gt;Console API提供了允许开发人员执行调试任务的功能，例如在代码中的某个位置记录消息或变量值，或者计算任务完成所需的时间。&lt;/p&gt;
&lt;h4&gt;IndexDB&lt;/h4&gt;
&lt;p&gt;IndexDB 是一个运行在浏览器上的&lt;strong&gt;非关系型数据库&lt;/strong&gt;。既然是数据库了，那就不是 5M、10M 这样小打小闹级别了。理论上来说，IndexDB 理论上是没有存储上限的一般来说不会小于 250M）。它不仅可以存储字符串，还可以存储二进制数据。&lt;/p&gt;
&lt;h4&gt;WebSQL&lt;/h4&gt;
&lt;p&gt;WebSQL 是浏览器端的关系行数据库，引入了一组使用 SQL 操作客户端数据库的 API。&lt;/p&gt;
&lt;h4&gt;Application Cache&lt;/h4&gt;
&lt;p&gt;WebSQL Application Cache 是 HTML5 中定义的一种离线存储技术标准。这种技术可以让开发者明确地指定页面中哪些静态资源可以在第一次访问网页的同时缓存到本地，并且在下次访问该网页时向服务器询问本地缓存的资源是否需要更新&lt;/p&gt;
&lt;h2&gt;面试攻略&lt;/h2&gt;
&lt;p&gt;这道题主要就是一个概念题，攻略就是要回答整体架构。&lt;/p&gt;
&lt;p&gt;\&lt;/p&gt;</description><author>全栈然叔</author><pubDate>Sun, 23 Jan 2022 23:51:57 GMT</pubDate></item><item><title>Day22 - 语义化标签搭建wiki</title><link>https://juejin.cn/post/7056047002903134244</link><description>&lt;p&gt;「这是我参与2022首次更文挑战的第5天，活动详情查看：&lt;a href="https://juejin.cn/post/7052884569032392740" title="https://juejin.cn/post/7052884569032392740"&gt;2022首次更文挑战&lt;/a&gt;」&lt;/p&gt;
&lt;h2&gt;知识讲解&lt;/h2&gt;
&lt;h3&gt;什么是语义标签&lt;/h3&gt;
&lt;p&gt;语义化标签其实就是可以让标签有自己的含义。&lt;/p&gt;
&lt;p&gt;对比下面两个html的区别&lt;/p&gt;
&lt;p&gt;传统标签&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-html"&gt;&amp;lt;div class="header"&amp;gt;
  &amp;lt;h1&amp;gt;html5语义化标签&amp;lt;/h1&amp;gt;
  &amp;lt;div class="nav"&amp;gt;
    &amp;lt;h2&amp;gt;导航&amp;lt;/h2&amp;gt;
    &amp;lt;ul&amp;gt;
      &amp;lt;li&amp;gt;章节标签&amp;lt;/li&amp;gt;
      &amp;lt;li&amp;gt;标题标签&amp;lt;/li&amp;gt;
    &amp;lt;/ul&amp;gt;
  &amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;语义化&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-html"&gt;&amp;lt;header&amp;gt;
  &amp;lt;h1&amp;gt;html5语义化标签&amp;lt;/h1&amp;gt;
  &amp;lt;nav&amp;gt;
    &amp;lt;h1&amp;gt;导航&amp;lt;/h1&amp;gt;
  &amp;lt;ul&amp;gt;
    &amp;lt;li&amp;gt;章节标签&amp;lt;/li&amp;gt;
  &amp;lt;li&amp;gt;标题标签&amp;lt;/li&amp;gt;
  &amp;lt;/ul&amp;gt;
  &amp;lt;/nav&amp;gt;
&amp;lt;/header&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;可以很清楚的看到都是头部的描述，但是语义化标签可以清楚内容的含义。&lt;/p&gt;
&lt;h3&gt;语义化标签的优势&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;代码结构清晰，方便阅读，有利于团队合作开发。&lt;/li&gt;
&lt;li&gt;方便其他设备解析（如屏幕阅读器、盲人阅读器、移动设备）以语义的方式来渲染网页。&lt;/li&gt;
&lt;li&gt;有利于搜索引擎优化（SEO）。&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;常见的语义化标签&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;w3c的标签说明： https://html.spec.whatwg.org/&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;&lt;code class="language-html"&gt;&amp;lt;title&amp;gt;：页面主题内容。
&amp;lt;hn&amp;gt;：h1~h6，分级标题，&amp;lt;h1&amp;gt; 与 &amp;lt;title&amp;gt; 协调有利于搜索引擎优化。
&amp;lt;ul&amp;gt;：无序列表。
&amp;lt;li&amp;gt;：有序列表。
&amp;lt;header&amp;gt;：页眉通常包括网站标志、主导航、全站链接以及搜索框。
&amp;lt;nav&amp;gt;：标记导航，仅对文档中重要的链接群使用。
&amp;lt;main&amp;gt;：页面主要内容，一个页面只能使用一次。如果是web应用，则包围其主要功能。
&amp;lt;article&amp;gt;：定义外部的内容，其中的内容独立于文档的其余部分。
&amp;lt;section&amp;gt;：定义文档中的节（section、区段）。比如章节、页眉、页脚或文档中的其他部分。
&amp;lt;aside&amp;gt;：定义其所处内容之外的内容。如侧栏、文章的一组链接、广告、友情链接、相关产品列表等。
&amp;lt;footer&amp;gt;：页脚，只有当父级是body时，才是整个页面的页脚。
&amp;lt;small&amp;gt;：呈现小号字体效果，指定细则，输入免责声明、注解、署名、版权。
&amp;lt;strong&amp;gt;：和 em 标签一样，用于强调文本，但它强调的程度更强一些。
&amp;lt;em&amp;gt;：将其中的文本表示为强调的内容，表现为斜体。
&amp;lt;mark&amp;gt;：使用黄色突出显示部分文本。
&amp;lt;figure&amp;gt;：规定独立的流内容（图像、图表、照片、代码等等）（默认有40px左右margin）。
&amp;lt;figcaption&amp;gt;：定义 figure 元素的标题，应该被置于 figure 元素的第一个或最后一个子元素的位置。
&amp;lt;cite&amp;gt;：表示所包含的文本对某个参考文献的引用，比如书籍或者杂志的标题。
&amp;lt;blockquoto&amp;gt;：定义块引用，块引用拥有它们自己的空间。
&amp;lt;q&amp;gt;：短的引述（跨浏览器问题，尽量避免使用）。
&amp;lt;time&amp;gt;：datetime属性遵循特定格式，如果忽略此属性，文本内容必须是合法的日期或者时间格式。
&amp;lt;abbr&amp;gt;：简称或缩写。
&amp;lt;dfn&amp;gt;：定义术语元素，与定义必须紧挨着，可以在描述列表dl元素中使用。
&amp;lt;address&amp;gt;：作者、相关人士或组织的联系信息（电子邮件地址、指向联系信息页的链接）。
&amp;lt;del&amp;gt;：移除的内容。
&amp;lt;ins&amp;gt;：添加的内容。
&amp;lt;code&amp;gt;：标记代码。
&amp;lt;meter&amp;gt;：定义已知范围或分数值内的标量测量。（Internet Explorer 不支持 meter 标签）
&amp;lt;progress&amp;gt;：定义运行中的进度（进程）。
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;主体部分&lt;/h3&gt;
&lt;pre&gt;&lt;code class="language-html"&gt;&amp;lt;html&amp;gt;
    &amp;lt;head&amp;gt;
        &amp;lt;title&amp;gt;HTML&amp;lt;/title&amp;gt;
    &amp;lt;/head&amp;gt;
    &amp;lt;body&amp;gt;
        &amp;lt;aside&amp;gt;&amp;lt;/aside&amp;gt;  
        &amp;lt;header&amp;gt;&amp;lt;/header&amp;gt;
        &amp;lt;main&amp;gt;&amp;lt;/main&amp;gt;
      &amp;lt;footer&amp;gt;&amp;lt;/footer&amp;gt;
    &amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;aside : 侧栏、文章的一组链接、广告、友情链接、相关产品列表等&lt;/li&gt;
&lt;li&gt;header：页眉通常包括网站标志、主导航、全站链接以及搜索框。&lt;/li&gt;
&lt;li&gt;main：页面主要内容，一个页面只能使用一次。如果是web应用，则包围其主要功能。&lt;/li&gt;
&lt;li&gt;footer： 页脚，只有当父级是body时，才是整个页面的页脚。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;导航栏&lt;/h3&gt;
&lt;pre&gt;&lt;code class="language-html"&gt;&amp;lt;nav&amp;gt;
  &amp;lt;h2&amp;gt;导航栏&amp;lt;/h2&amp;gt;
  &amp;lt;ol&amp;gt;
    &amp;lt;li&amp;gt;历史&amp;lt;/li&amp;gt;
    &amp;lt;li&amp;gt;标记&amp;lt;/li&amp;gt;
    &amp;lt;li&amp;gt;语义化HTML&amp;lt;/li&amp;gt;
    &amp;lt;li&amp;gt;分发&amp;lt;/li&amp;gt;
  &amp;lt;/ol&amp;gt;
&amp;lt;/nav&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img alt="image-20220122212501349" src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/4dda0ebea02c43e9b8e0601fcf53cc4f~tplv-k3u1fbpfcp-zoom-1.image" /&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;nav: 标记导航，仅对文档中重要的链接群使用&lt;/li&gt;
&lt;li&gt;ol： 有序列表&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;段落&lt;/h3&gt;
&lt;pre&gt;&lt;code class="language-html"&gt;&amp;lt;article&amp;gt;
    &amp;lt;h1&amp;gt;一、大标题&amp;lt;/h1&amp;gt;
    &amp;lt;section&amp;gt;
        &amp;lt;h1&amp;gt;1. 小标题&amp;lt;/h1&amp;gt;
        &amp;lt;section&amp;gt;
            &amp;lt;h1&amp;gt;1.1 小标题&amp;lt;/h1&amp;gt;
        &amp;lt;/section&amp;gt;
    &amp;lt;/section&amp;gt;
&amp;lt;/article&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img alt="image-20220122212752795" src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/d8317b5d41244d5b8cc356e5e020a5c1~tplv-k3u1fbpfcp-zoom-1.image" /&gt;&lt;/p&gt;
&lt;p&gt;可以看到使用section标记+h1就可以非常简单的完成标题分级。&lt;/p&gt;
&lt;h3&gt;内容&lt;/h3&gt;
&lt;pre&gt;&lt;code class="language-html"&gt;    正文&amp;lt;q&amp;gt;引述2&amp;lt;/q&amp;gt;
    &amp;lt;del&amp;gt;删除的内容&amp;lt;/del&amp;gt;
    &amp;lt;ins&amp;gt;添加的内容&amp;lt;/ins&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;正文中常用的&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;del： 删除内容&lt;/li&gt;
&lt;li&gt;ins： 添加内容&lt;/li&gt;
&lt;li&gt;q： 引用内容&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="image-20220122212932695" src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/0e39da11566842d1835c9e2e59ae0556~tplv-k3u1fbpfcp-zoom-1.image" /&gt;&lt;/p&gt;
&lt;h3&gt;图片引用&lt;/h3&gt;
&lt;pre&gt;&lt;code class="language-html"&gt;    &amp;lt;figure&amp;gt;
        &amp;lt;img src="//upload.wikimedia.org/wikipedia/commons/thumb/6/61/HTML5_logo_and_wordmark.svg/200px-HTML5_logo_and_wordmark.svg.png" alt=""&amp;gt;
        &amp;lt;figcaption&amp;gt;HTML5Logo&amp;lt;/figcaption&amp;gt;
    &amp;lt;/figure&amp;gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;figure:规定独立的流内容（图像、图表、照片、代码等等）（默认有40px左右margin）。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;figcaption: 内容标题&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;代码和运行结果&lt;/h3&gt;
&lt;pre&gt;&lt;code class="language-html"&gt;&amp;lt;pre&amp;gt;&amp;lt;!-- 预格式化文本 保留空格和换行符--&amp;gt;
    &amp;lt;code&amp;gt;
        exports.call = function (context, ...args) {
            // this 为调用方法 例:f.call this = f
            context.fn = this;
            const result = context.fn(...args);
            delete context.fn;
            return result;
            };
                            &amp;lt;/code&amp;gt;
        ✅ 运行结果:
                            &amp;lt;samp&amp;gt;&amp;lt;!-- 一个短语标签，用来格式化文档中的文本为计算机输出 --&amp;gt;
        (base) ➜  call-apply-bind git:(master) ✗ jest ../call-apply-bind
        PASS  __tests__/index.spec.js
            实现call 、apply、 bind函数
            ✓ 测试call方法 (7 ms)
            ✓ 测试apply方法 (1 ms)
            ✓ 测试bind方法 (1 ms)
        
        Test Suites: 1 passed, 1 total
        Tests:       3 passed, 3 total
        Snapshots:   0 total
        Time:        1.657 s
        Ran all test suites matching /..\/call-apply-bind/i.
        (base) ➜  call-apply-bind git:(master) ✗
    &amp;lt;/samp&amp;gt;
&amp;lt;/pre&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;pre: &lt;em&gt;预格式化文本 保留空格和换行符&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;samp: 标签表示一段用户应该对其没有什么其他解释的文本字符。要从正常的上下文抽取这些字符时，通常要用到这个标签。&lt;/li&gt;
&lt;li&gt;code: 用于引用计算机代码&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="image-20220122213458408" src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/ccc7f337e6ad4597ab62e97f72ff3ec6~tplv-k3u1fbpfcp-zoom-1.image" /&gt;&lt;/p&gt;
&lt;h2&gt;面试攻略&lt;/h2&gt;
&lt;p&gt;HTML5的一个重大更新就是增加了一系列的语义化标签。希望大家含义说清+ 描述系统。&lt;/p&gt;</description><author>全栈然叔</author><pubDate>Sat, 22 Jan 2022 07:06:44 GMT</pubDate></item><item><title>Day21 - innerText、 nodeValue与 textContent的区别</title><link>https://juejin.cn/post/7056045978855571493</link><description>&lt;p&gt;「这是我参与2022首次更文挑战的第4天，活动详情查看：&lt;a href="https://juejin.cn/post/7052884569032392740" title="https://juejin.cn/post/7052884569032392740"&gt;2022首次更文挑战&lt;/a&gt;」&lt;/p&gt;
&lt;h1&gt;知识讲解&lt;/h1&gt;
&lt;h3&gt;什么是Dom&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;DOM=DocumentObjectModel，文档对象模型，DOM可以以一种独立于平台和语言的方式访问和修改一个文档的内容和结构&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;你可以认为就是浏览器会把HTML文档解析为一个对象。&lt;/p&gt;
&lt;p&gt;就像一个树一样。比如下面会有和然后其他标签都是这棵树上的数值和树叶。&lt;/p&gt;
&lt;p&gt;&lt;img alt="image-20220121235611713" src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/2ed3d8b1d1264c10aca15f20e6206e16~tplv-k3u1fbpfcp-zoom-1.image" /&gt;&lt;/p&gt;
&lt;h3&gt;&lt;/h3&gt;
&lt;h3&gt;节点种类&lt;/h3&gt;
&lt;p&gt;节点种类一共分为九类&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;元素节点 　　Node.ELEMENT_NODE(1) 属性节点 　　Node.ATTRIBUTE_NODE(2) 文本节点 　　Node.TEXT_NODE(3) CDATA节点 Node.CDATA_SECTION_NODE(4) 实体引用名称节点 　　 Node.ENTRY_REFERENCE_NODE(5) 实体名称节点 　　Node.ENTITY_NODE(6) 处理指令节点 　　Node.PROCESSING_INSTRUCTION_NODE(7) 注释节点 　 Node.COMMENT_NODE(8) 文档节点 　 Node.DOCUMENT_NODE(9) 文档类型节点 　　Node.DOCUMENT_TYPE_NODE(10) 文档片段节点 　　Node.DOCUMENT_FRAGMENT_NODE(11) DTD声明节点 Node.NOTATION_NODE(12)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;节点遍历&lt;/h3&gt;
&lt;p&gt;树起始于文档节点，并由此继续伸出枝条，直到处于这棵树最低级别的所有文本节点为止。&lt;/p&gt;
&lt;h3&gt;三者区别&lt;/h3&gt;
&lt;p&gt;innerText、 nodeValue与 textContent这三个api都是取某一个文本内容。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;div id="app"&amp;gt;
 &amp;nbsp;  水果
 &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;lt;!-- 注释 --&amp;gt;
 &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;lt;p&amp;gt;
 &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;  西瓜
 &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;lt;div style="display: none;"&amp;gt;
 &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;  瓜子
 &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;lt;/div&amp;gt;
 &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;lt;/p&amp;gt;
 &amp;nbsp; &amp;nbsp;&amp;lt;/p&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h4&gt;nodeValue&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;nodeValue只能取文本节点的内容。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;&lt;code&gt;const app = document.getElementById('app')
console.log(app.nodeValue) // null
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;其实【水果】这个是div下的一个文本节点。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;const app = document.getElementById('app')
console.log(app.childNodes[0].nodeValue) // null
console.log(app.childNodes[1].nodeValue) // null
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;实际上只对CDATA片段，注释comment，Processing Instruction节点或text节点有效。&lt;/p&gt;
&lt;h4&gt;innerHTML与innerText&lt;/h4&gt;
&lt;p&gt;这两个api的区别功能是从起始位置到终止位置的内容, 区别在于是否去除Html标签 。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;const app = document.getElementById('app')
console.log(app.innerHTML) // null
console.log(app.innerText) // null
&lt;/code&gt;&lt;/pre&gt;
&lt;h4&gt;textContent&lt;/h4&gt;
&lt;p&gt;这个是一个比较新的api ie8以前的浏览器可能会产生不兼容问题。&lt;/p&gt;
&lt;p&gt;功能是textContent 属性设置或返回指定节点的文本内容，以及它的所有后代。&lt;/p&gt;
&lt;p&gt;与innerText的区别&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;会获取style=“display:none”中的文本&lt;/li&gt;
&lt;li&gt;会获取style标签中的文本&lt;/li&gt;
&lt;li&gt;不解析html更快捷性能好&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;面试攻略&lt;/h2&gt;
&lt;p&gt;这道题其实我也不太会，确实比较惭愧。但是学习了这道题给我的感觉就是了解这些基础api对了解框架源码有很多好处，就比如十二种节点类型。&lt;/p&gt;</description><author>全栈然叔</author><pubDate>Sat, 22 Jan 2022 07:04:30 GMT</pubDate></item><item><title>Day20 - 如何实现call和apply、bind</title><link>https://juejin.cn/post/7055224075324489764</link><description>&lt;p&gt;「这是我参与2022首次更文挑战的第3天，活动详情查看：&lt;a href="https://juejin.cn/post/7052884569032392740" title="https://juejin.cn/post/7052884569032392740"&gt;2022首次更文挑战&lt;/a&gt;」&lt;/p&gt;
&lt;h3&gt;知识讲解&lt;/h3&gt;
&lt;p&gt;call、apply、bind的功能就是改变this的指向、只是三个函数的参数风格不太一样。&lt;/p&gt;
&lt;h3&gt;call函数实现&lt;/h3&gt;
&lt;p&gt;[function].call([this], [param]...)，一句话概括：&lt;code&gt;call()&lt;/code&gt; 将函数的 &lt;code&gt;this&lt;/code&gt; 指定到 &lt;code&gt;call()&lt;/code&gt; 的第一个参数值同时将剩余参数指定的情况下调用某个函数或方法。&lt;/p&gt;
&lt;p&gt;用测试用例描述&lt;/p&gt;
&lt;pre&gt;&lt;code&gt; &amp;nbsp;it("测试call方法", () =&amp;gt; {
 &amp;nbsp; &amp;nbsp;const { call } = require("../index");
 &amp;nbsp; &amp;nbsp;Function.prototype.myCall = call;
 &amp;nbsp; &amp;nbsp;const obj = { a: 1 };
 &amp;nbsp; &amp;nbsp;const f = function (...args) {
 &amp;nbsp; &amp;nbsp; &amp;nbsp;return { context: this, args };
 &amp;nbsp;  };
 &amp;nbsp; &amp;nbsp;expect(f.myCall(obj, 1, 2)).toEqual({ context: { a: 1 }, args: [1, 2] });
  });
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;代码实现&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;exports.call = function (context, ...args) {
 &amp;nbsp;// this 为调用方法 例:f.call this = f
 &amp;nbsp;context.fn = this;
 &amp;nbsp;const result = context.fn(...args);
 &amp;nbsp;delete context.fn;
 &amp;nbsp;return result;
};
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;讲解&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;f.myCall函数调用时，this上下文其实是f函数。&lt;/li&gt;
&lt;/ul&gt;
&lt;!----&gt;
&lt;ul&gt;
&lt;li&gt;需要的绑定的上下文用参数context传入&lt;/li&gt;
&lt;/ul&gt;
&lt;!----&gt;
&lt;ul&gt;
&lt;li&gt;其余参数使用展开语法表示&lt;/li&gt;
&lt;/ul&gt;
&lt;!----&gt;
&lt;ul&gt;
&lt;li&gt;首先将函数绑定到上下文对象中&lt;/li&gt;
&lt;/ul&gt;
&lt;!----&gt;
&lt;ul&gt;
&lt;li&gt;删除context上线文中的fn方法清理现场&lt;/li&gt;
&lt;li&gt;返回执行结果&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;apply的实现&lt;/h3&gt;
&lt;p&gt;call方法和apply方法类似，两者唯一不同的是，执行参数是是一个数组而不是多个参数&lt;/p&gt;
&lt;p&gt;测试用例表示&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;it("测试apply方法", () =&amp;gt; {
 &amp;nbsp; &amp;nbsp;const { apply } = require("../index");
 &amp;nbsp; &amp;nbsp;Function.prototype.myApply = apply;
 &amp;nbsp; &amp;nbsp;const obj = { a: 1 };
​
 &amp;nbsp; &amp;nbsp;const f = function (...args) {
 &amp;nbsp; &amp;nbsp; &amp;nbsp;return { context: this, args };
 &amp;nbsp;  };
 &amp;nbsp; &amp;nbsp;expect(f.myApply(obj, [1, 2])).toEqual({ context: { a: 1 }, args: [1, 2] });
});
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;代码实现&lt;/p&gt;
&lt;p&gt;由于变动非常小甚至可以直接调用call函数完成&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;exports.apply = function (context, args) {
 &amp;nbsp; &amp;nbsp;return this.call(context,...args)
};
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;正经代码是这样&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;exports.apply = function (context, args) { // 只需要变动一行 ...args =&amp;gt; args
 &amp;nbsp;// this 为调用方法 例:f.call this = f
 &amp;nbsp;context.fn = this;
 &amp;nbsp;const result = context.fn(...args);
 &amp;nbsp;delete context.fn;
 &amp;nbsp;return result;
};
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;bind函数&lt;/h3&gt;
&lt;p&gt;bind返回fun的拷贝，并指定了fun的this指向，保存了fun的参数。&lt;/p&gt;
&lt;p&gt;测试用例表示&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;it("测试bind方法", () =&amp;gt; {
 &amp;nbsp; &amp;nbsp;const { bind } = require("../index");
 &amp;nbsp; &amp;nbsp;Function.prototype.myBind = bind;
 &amp;nbsp; &amp;nbsp;const obj = { a: 1 };
​
 &amp;nbsp; &amp;nbsp;const f = function (...args) {
 &amp;nbsp; &amp;nbsp; &amp;nbsp;return { context: this, args };
 &amp;nbsp;  };
 &amp;nbsp; &amp;nbsp;expect(f.bind(obj, 1, 2)(3, 4)).toEqual({
 &amp;nbsp; &amp;nbsp; &amp;nbsp;context: { a: 1 },
 &amp;nbsp; &amp;nbsp; &amp;nbsp;args: [1, 2, 3, 4],
 &amp;nbsp;  });
});
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;代码实现&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;exports.bind = function (context, ...args) {
 &amp;nbsp;// this 为调用方法 例:f.call this = f
 &amp;nbsp;const f = this;
 &amp;nbsp;return function F() {
 &amp;nbsp; &amp;nbsp;return f.apply(context, [...args, ...arguments]);
  };
};
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;实现一个工厂函数&lt;/li&gt;
&lt;li&gt;使用apply指向函数&lt;/li&gt;
&lt;li&gt;使用传入的context作为上下文&lt;/li&gt;
&lt;li&gt;将bind传入的执行参数与执行F()时传入的参数合并作为执行参数&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="image-20220120174836487" src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/cc664054e630483bad0d6a4650498488~tplv-k3u1fbpfcp-zoom-1.image" /&gt;&lt;/p&gt;
&lt;h2&gt;面试攻略&lt;/h2&gt;
&lt;p&gt;这个就是一道经典的手写代码题。&lt;/p&gt;
&lt;h1&gt;🔥2022然叔坚持打卡365天&lt;/h1&gt;
&lt;h1&gt;大家一波一键三连和然叔一起呀&lt;/h1&gt;
&lt;p&gt;Day1 - JS 整数是怎么表示的？&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.bilibili.com/video/BV1gr4y1U7pY?p=1"&gt;B栈视频&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://juejin.cn/post/7048191028280426526"&gt;掘金文章&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/su37josephxia/frontend-interview/issues/3"&gt;Github&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Day2 - 0.1 + 0.2 === 0.3 嘛？为什么？怎么解决？&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.bilibili.com/video/BV1gr4y1U7pY?p=2"&gt;B栈视频&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://juejin.cn/post/7048554678858022925"&gt;掘金文章&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/su37josephxia/frontend-interview/issues/2"&gt;Github&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Day3 - Number() 的存储空间是多大？如果后台发送了一个超过最大限制的数字怎么办?&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.bilibili.com/video/BV1gr4y1U7pY?p=3"&gt;B栈视频&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://juejin.cn/post/7048998409067298830"&gt;掘金文章&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/su37josephxia/frontend-interview/issues/4"&gt;Github&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Day4 - 判断数据类型的方式有哪些？&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.bilibili.com/video/BV1gr4y1U7pY?p=4"&gt;B栈视频&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://juejin.cn/post/7049383966700208165"&gt;掘金文章&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/su37josephxia/frontend-interview/issues/5"&gt;Github&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Day5 - new 一个函数发生了什么？&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.bilibili.com/video/BV1gr4y1U7pY?p=5"&gt;B栈视频&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://juejin.cn/post/7049731312801808420"&gt;掘金文章&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/su37josephxia/frontend-interview/issues/6"&gt;Github&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Day6 - new 一个构造函数，如果函数返回 &lt;code&gt;return {}&lt;/code&gt; 、 &lt;code&gt;return null&lt;/code&gt; ， &lt;code&gt;return 1&lt;/code&gt; ， &lt;code&gt;return true&lt;/code&gt; 会发生什么情况？&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.bilibili.com/video/BV1gr4y1U7pY?p=6"&gt;B栈视频&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://juejin.cn/post/7050087767962976287"&gt;掘金文章&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/su37josephxia/frontend-interview/issues/7"&gt;Github&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Day7 - 分析一下箭头语法为什么不能当做构造函数&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.bilibili.com/video/BV1gr4y1U7pY?p=7"&gt;B栈视频&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://juejin.cn/post/7050476297318825992"&gt;掘金文章&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/su37josephxia/frontend-interview/issues/25"&gt;Github&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Day8 - 什么是闭包？如何产生闭包&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.bilibili.com/video/BV1gr4y1U7pY?p=8"&gt;B栈视频&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://juejin.cn/post/7050861660000976904"&gt;掘金文章&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/su37josephxia/frontend-interview/issues/20"&gt;Github&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Day9 - 如何用闭包制造惰性函数?&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.bilibili.com/video/BV1gr4y1U7pY?p=9"&gt;B栈视频&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://juejin.cn/post/7051233635608821797/"&gt;掘金文章&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/su37josephxia/frontend-interview/issues/23"&gt;Github&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Day14 - 词法作用域、块级作用域、作用域链、静态动态作用域&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.bilibili.com/video/BV1gr4y1U7pY?p=14"&gt;B栈视频&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://juejin.cn/post/7053087344827744292"&gt;掘金文章&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/su37josephxia/frontend-interview/issues/21"&gt;Github&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Day10 - 闭包与科里化、偏应用函数的关系&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.bilibili.com/video/BV1gr4y1U7pY?p=10"&gt;B栈视频&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://juejin.cn/post/7051547767855906852"&gt;掘金文章&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/su37josephxia/frontend-interview/issues/54"&gt;Github&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Day11 - 谈谈闭包与即时函数的应用&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.bilibili.com/video/BV1gr4y1U7pY?p=11"&gt;B栈视频&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://juejin.cn/post/7051968010512236574"&gt;掘金文章&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/su37josephxia/frontend-interview/issues/55"&gt;Github&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Day12 - 如何利用闭包完成类库封装&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.bilibili.com/video/BV1gr4y1U7pY?p=12"&gt;B栈视频&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://juejin.cn/post/7052238635671748616"&gt;掘金文章&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/su37josephxia/frontend-interview/issues/56"&gt;Github&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Day13 - 如何用闭包完成模块化(Webpack原理)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.bilibili.com/video/BV1gr4y1U7pY?p=13"&gt;B栈视频&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://juejin.cn/post/7052658786477015054"&gt;掘金文章&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/su37josephxia/frontend-interview/issues/57"&gt;Github&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Day15 - let为什么能够解决循环陷阱&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.bilibili.com/video/BV1gr4y1U7pY?p=15"&gt;B栈视频&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://juejin.cn/post/7053475694730280997"&gt;掘金文章&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/su37josephxia/frontend-interview/issues/58"&gt;Github&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Day16 - 为什么一定要有块级作用域？&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.bilibili.com/video/BV1gr4y1U7pY?p=16"&gt;B栈视频&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://juejin.cn/post/7053826986812112909"&gt;掘金文章&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/su37josephxia/frontend-interview/issues/59"&gt;Github&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Day17 - let是否会造成变量提升&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.bilibili.com/video/BV1gr4y1U7pY?p=17"&gt;B栈视频&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://juejin.cn/post/7054194651380580389"&gt;掘金文章&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/su37josephxia/frontend-interview/issues/60"&gt;Github&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Day18 - 介绍一下this指向4种形式&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.bilibili.com/video/BV1gr4y1U7pY?p=18"&gt;B栈视频&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://juejin.cn/post/7054525103098298404"&gt;掘金文章&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/su37josephxia/frontend-interview/issues/61"&gt;Github&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Day19 - React中的事件绑定与箭头函数&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.bilibili.com/video/BV1gr4y1U7pY?p=19"&gt;B栈视频&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://juejin.cn/post/7054949116295512077"&gt;掘金文章&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/su37josephxia/frontend-interview/issues/71"&gt;Github&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;===============&lt;/p&gt;</description><author>全栈然叔</author><pubDate>Thu, 20 Jan 2022 01:53:22 GMT</pubDate></item></channel></rss>